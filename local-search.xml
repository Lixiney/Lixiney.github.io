<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Sqli-Labs 通关文档</title>
    <link href="/posts/879a70bf.html"/>
    <url>/posts/879a70bf.html</url>
    
    <content type="html"><![CDATA[<h1 id="Less-01"><a href="#Less-01" class="headerlink" title="Less-01"></a>Less-01</h1><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全</tag>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql增删改查基础</title>
    <link href="/posts/b710732f.html"/>
    <url>/posts/b710732f.html</url>
    
    <content type="html"><![CDATA[<h3 id="首先启动数据库"><a href="#首先启动数据库" class="headerlink" title="首先启动数据库"></a>首先启动数据库</h3><ul><li>Linux :</li></ul><div class="code-wrapper"><pre><code class="hljs sql">sudo systemctl <span class="hljs-keyword">start</span> mysql</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">mysql -h 数据库地址 -u 用户名 -p 密码</code></pre></div><ul><li>windows：<ul><li>进入mysql 目录下的 bin 目录，打开cmd</li></ul></li></ul><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;</code></pre></div><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><div class="code-wrapper"><pre><code class="hljs sql">use [数据库名];</code></pre></div><h3 id="查看数据表"><a href="#查看数据表" class="headerlink" title="查看数据表"></a>查看数据表</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> tables;</code></pre></div><h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">desc</span> [数据表名];</code></pre></div><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><h3 id="创建一个数据库"><a href="#创建一个数据库" class="headerlink" title="创建一个数据库"></a>创建一个数据库</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database [数据库名];</code></pre></div><h3 id="创建一个数据表"><a href="#创建一个数据表" class="headerlink" title="创建一个数据表"></a>创建一个数据表</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> [数据表名] (    字段名<span class="hljs-number">1</span> 字段类型，    字段名<span class="hljs-number">2</span> 字段类型);</code></pre></div><p>eg:</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> <span class="hljs-keyword">user</span> (    id <span class="hljs-type">int</span>(<span class="hljs-number">20</span>),    name <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),    password <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>));</code></pre></div><h3 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> aaa <span class="hljs-keyword">values</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2.</span>..);</code></pre></div><p>注意 插入的字段数必须和表结构中原有的字段数相同</p><p>方法2：指定字段添加数据</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> aaa (字段<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span>) <span class="hljs-keyword">values</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>);</code></pre></div><p>注意：值如果是整型不用加引号，如果是字符串必须加引号</p><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> database [数据库名];</code></pre></div><h3 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> [数据表名];</code></pre></div><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> [表名] <span class="hljs-keyword">where</span> 条件</code></pre></div><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> 表名<span class="hljs-keyword">set</span> 字段名<span class="hljs-number">1</span> <span class="hljs-operator">=</span> 字段值<span class="hljs-number">1</span> ， [字段名<span class="hljs-number">2</span> <span class="hljs-operator">=</span> 字段值<span class="hljs-number">2</span>]；<span class="hljs-keyword">where</span> 条件语句；# <span class="hljs-keyword">where</span> <span class="hljs-operator">+</span> 条件 更新部分数据 <span class="hljs-operator">||</span> 不加<span class="hljs-keyword">where</span>子句更新全部数据</code></pre></div><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><h3 id="普通查询"><a href="#普通查询" class="headerlink" title="普通查询"></a>普通查询</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> [字段] <span class="hljs-keyword">from</span> [表] <span class="hljs-keyword">where</span> 条件</code></pre></div><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> [字段] <span class="hljs-keyword">from</span> [表] <span class="hljs-keyword">where</span> [字段] <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> [字段] <span class="hljs-keyword">from</span> [表] <span class="hljs-keyword">where</span> [条件])</code></pre></div><p>eg:</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> artical1 <span class="hljs-keyword">where</span> <span class="hljs-keyword">value</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;helloworld&#x27;</span>);</code></pre></div><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p>条件：表1 和 表2 的字段数必须相同</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span></code></pre></div><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>下划线通配符 （_）</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> str <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%str%&#x27;</span>;</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF-PHP代码审计</title>
    <link href="/posts/5fe44501.html"/>
    <url>/posts/5fe44501.html</url>
    
    <content type="html"><![CDATA[<h1 id="is-numeric-函数"><a href="#is-numeric-函数" class="headerlink" title="is_numeric 函数"></a>is_numeric 函数</h1><div class="code-wrapper"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$num</span></span>)</span>&#123;    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;0x&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);    <span class="hljs-keyword">return</span> <span class="hljs-variable">$num</span>;&#125;<span class="hljs-variable">$num</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$num</span>) <span class="hljs-keyword">and</span> <span class="hljs-variable">$num</span>!==<span class="hljs-string">&#x27;36&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$num</span>)!==<span class="hljs-string">&#x27;36&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$num</span>)==<span class="hljs-string">&#x27;36&#x27;</span>)&#123;    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-string">&#x27;36&#x27;</span>)&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker!!&quot;</span>;    &#125;&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker!!!&quot;</span>;&#125;</code></pre></div><p>绕过 ： 前面加上 %09 %0a %0b %0c %0d 等空字符</p><p>is_numeric() 函数对于 %00 这类空字符，不管是放在前后都可以判断为非数值，而%20空格字符只能放在数值后，因为查看函数发现改函数对于第一个空格字符会跳过空格字符直接判断后面的内容</p><h1 id="preg-match-函数-–-正则表达式"><a href="#preg-match-函数-–-正则表达式" class="headerlink" title="preg_match 函数 – 正则表达式"></a>preg_match 函数 – 正则表达式</h1><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>0次、1次或多次匹配其前一位</td></tr><tr><td>+</td><td>1次或多次匹配其前的原子</td></tr><tr><td>？</td><td>0次或1次匹配</td></tr><tr><td>|</td><td>匹配两个或者多个选择</td></tr><tr><td>^</td><td>匹配字符串串首</td></tr><tr><td>$</td><td>匹配字符串</td></tr><tr><td>[]</td><td>匹配方括号中任一原子</td></tr><tr><td>[^]</td><td>匹配除方括号中的原子外的任何字符</td></tr><tr><td>{m}</td><td>表示其前原子恰好出现m次</td></tr><tr><td>{m,n}</td><td>表示其前原子 （n&gt;m）</td></tr><tr><td>{m，}</td><td>表示其前原子出现不少于m次</td></tr><tr><td>（）</td><td>整体表示一个原子</td></tr><tr><td>.</td><td>匹配除换行之外的任何一个字符</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>); <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>]))&#123;     <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];     <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/.+?zkaqzkaq/is&#x27;</span>, <span class="hljs-variable">$f</span>))&#123;         <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bye!&#x27;</span>);     &#125;     <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$f</span>, <span class="hljs-string">&#x27;zkaqzkaq&#x27;</span>) === <span class="hljs-literal">FALSE</span>)&#123;         <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bye!!&#x27;</span>);     &#125;     <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>; &#125; </code></pre></div><p>注 ： preg_match 函数只能处理字符串，当传入的参数为数组时会返回 false</p><h1 id="md5-sha1-函数"><a href="#md5-sha1-函数" class="headerlink" title="md5 sha1 函数"></a>md5 sha1 函数</h1><ol><li>对于php强比较和弱比较： md5() ,sha1() 函数无法处理数组，如果传入的为数组，两个数组经过加密后都是 NULL ，也就是相等的。</li><li>对于某些特殊的字符串加密后得到的密文以 0e 开头，php 会当作可续计数法来处理，也就是 0 的n 次方，得到的值比较的时候 都相同。</li></ol><p>payload:</p><div class="code-wrapper"><pre><code class="hljs dns">md5： <span class="hljs-number">240610708</span>:<span class="hljs-number">0</span>e4620974319065090195<span class="hljs-number">62988736854</span>QLTHNDT:<span class="hljs-number">0</span>e40596782540195537<span class="hljs-number">2549139051580</span>QNKCDZO:<span class="hljs-number">0</span>e830400451993494058<span class="hljs-number">024219903391</span>PJNPDWY:<span class="hljs-number">0</span>e2915290528947027745<span class="hljs-number">57631701704</span>NWWKITQ:<span class="hljs-number">0</span>e7630820709760383476<span class="hljs-number">57360817689</span>NOOPCJF:<span class="hljs-number">0</span>e818888003657176127<span class="hljs-number">862245791911</span>MMHUWUV:<span class="hljs-number">0</span>e701732711630150438<span class="hljs-number">129209816536</span>MAUXXQC:<span class="hljs-number">0</span>e4784784668484390404<span class="hljs-number">34801845361</span> sha1： <span class="hljs-number">10932435112</span>: <span class="hljs-number">0</span>e0776691500413317634705586<span class="hljs-number">5026311692244</span>aaroZmOk: <span class="hljs-number">0</span>e66507019969427134894567494<span class="hljs-number">305185566735</span>aaK1STfY: <span class="hljs-number">0</span>e766585266557562076882711596<span class="hljs-number">24026011393</span>aaO8zKZF: <span class="hljs-number">0</span>e89257456677279068558073954<span class="hljs-number">252716165668</span>aa3OFF9m: <span class="hljs-number">0</span>e369777862785179849592603940<span class="hljs-number">24281014729</span><span class="hljs-number">0</span>e<span class="hljs-number">1290633704</span>: <span class="hljs-number">0</span>e19985187802402577070739524<span class="hljs-number">195726831799</span></code></pre></div><p>eg:</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-variable">$name</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>];<span class="hljs-keyword">if</span>(<span class="hljs-variable">$name</span> != <span class="hljs-variable">$pass</span>)&#123;    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$name</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$pass</span>))&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;True: flag&quot;</span>;    &#125;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;wrong&quot;</span>;    &#125;&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;1&quot;</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><ul><li><p>使用数组绕过</p><ul><li><code>http://localhost/?name[]=aaa&amp;pass[]=bbb</code></li></ul></li><li><p>使用特殊值绕过</p><ul><li><code>http://localhost/?name=QLTHNDT&amp;pass=QNKCDZO</code></li></ul></li></ul><p>案例：</p><div class="code-wrapper"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span>    <span class="hljs-comment">// include(&#x27;flag.php&#x27;);</span>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);    <span class="hljs-variable">$v1</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];    <span class="hljs-variable">$v2</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$v2</span>))&#123;        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">ctype_alpha</span>(<span class="hljs-variable">$v1</span>))&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;v1 error&quot;</span>);        &#125;        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>))&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;v2 error&quot;</span>);        &#125;        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$v1</span>)==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$v2</span>))&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&#123;asd&#125;&quot;</span>;        &#125;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;where is flag?&quot;</span>;    &#125;<span class="hljs-meta">?&gt;</span> </code></pre></div><h1 id="strcmp-函数"><a href="#strcmp-函数" class="headerlink" title="strcmp 函数"></a>strcmp 函数</h1><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">strcmp</span>(<span class="hljs-variable">$str1</span>,<span class="hljs-variable">$str2</span>)<span class="hljs-comment">//strcmp 函数是比较两个字符串，如果str1&lt;str2 则返回 &lt; 0 。如果str1&gt;str2 则返回 &gt; 0 。 如果两者相等则返回 0；</span></code></pre></div><p><strong>strcmp 比较的是字符串类型，如果强行传入其他类型参数，会出错，出错后返回值为0，一般利用这一点进行绕过</strong></p><ul><li>flag.php</li></ul><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;flag&#123;lkasjhfdasdhfasiu8dfhawes&#125;&#x27;</span>;<span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;asddddddddddddddddd&#x27;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><ul><li>index.php</li></ul><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strcmp</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>],<span class="hljs-variable">$password</span>) == <span class="hljs-number">0</span>)&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$flag</span>&quot;</span>;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;error&quot;</span>;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><h1 id="switch-函数"><a href="#switch-函数" class="headerlink" title="switch 函数"></a>switch 函数</h1><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;test.php&quot;</span>);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;paraml&#x27;</span>]))&#123;    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;paraml&#x27;</span>];    <span class="hljs-keyword">switch</span>(<span class="hljs-variable">$a</span>)&#123;        <span class="hljs-keyword">case</span> <span class="hljs-variable">$a</span>&gt;=<span class="hljs-number">0</span>:            <span class="hljs-keyword">echo</span> <span class="hljs-number">0</span>;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-variable">$a</span>&gt;=<span class="hljs-number">10</span>:            <span class="hljs-keyword">echo</span> FLAG;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">default</span>:            <span class="hljs-keyword">echo</span> <span class="hljs-number">2</span>;            <span class="hljs-keyword">break</span>;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>payload:</p><div class="code-wrapper"><pre><code class="hljs routeros">?<span class="hljs-attribute">paraml</span>=0</code></pre></div><p>首先传进去 a &#x3D; 0;</p><ol><li>进入第一个case  : 判断 0&gt;&#x3D;0 结果为true，接着判断 0 &#x3D;&#x3D; true ，结果是false;</li><li>进入第二个case  ：判断 0&gt;&#x3D;10 结果是false，接着判断 0 &#x3D;&#x3D; false 结果是true;</li><li>输出flag;</li></ol><h1 id="intval-函数"><a href="#intval-函数" class="headerlink" title="intval 函数"></a>intval 函数</h1><p><em>注：漏洞只存在于某些版本的php中</em></p><p>intval 用于获取变量的整数值</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-number">53</span>)  <span class="hljs-comment">// 53</span><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-number">5.3</span>) <span class="hljs-comment">// 5</span></code></pre></div><p>函数使用方法：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">int</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-keyword">var</span>,base)<span class="hljs-comment">/*</span><span class="hljs-comment">var 是要转换成 integer 的数量值，base只转化所用的进制</span><span class="hljs-comment">如果base是0，通过检测 var 的格式来决定所使用的进制</span><span class="hljs-comment">0x -&gt; 16进制</span><span class="hljs-comment">0 -&gt; 8进制</span><span class="hljs-comment">否则使用10 进制</span><span class="hljs-comment">*/</span></code></pre></div><p>成功时返回 var 的 integer 值，失败时返回 0； </p><p>空的 array 返回0 ，非空的 array 返回 0；</p><p>如果是一个弱比较 a &#x3D;&#x3D; b  ，我们传入 a[]&#x3D;1和b[]&#x3D;2</p><p>某些版本的php对科学计数法中的e不敏感</p><h4 id="案例1："><a href="#案例1：" class="headerlink" title="案例1："></a>案例1：</h4><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;test.php&#x27;</span>);<span class="hljs-variable">$s</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$s</span>) &lt; <span class="hljs-number">666</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$s</span>+<span class="hljs-number">1</span>) &gt; <span class="hljs-number">667</span>)&#123;    <span class="hljs-keyword">echo</span> FLAG;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>payload:</p><div class="code-wrapper"><pre><code class="hljs ruby"><span class="hljs-string">?a</span> = <span class="hljs-number">1e10</span></code></pre></div><h4 id="案例2："><a href="#案例2：" class="headerlink" title="案例2："></a>案例2：</h4><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>===<span class="hljs-string">&quot;6666&quot;</span>)&#123;          <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);    &#125;    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">6666</span>)&#123;         <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>);    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>解析： 函数格式 <code>intval($value,$base)</code></p><p>当 <code>$base</code> 的值为0 时，函数会检测 $value 的格式来决定使用的进制</p><p>payload：</p><p><code>/?num=0x1a0a</code></p><h1 id="strpos-函数"><a href="#strpos-函数" class="headerlink" title="strpos 函数"></a>strpos 函数</h1><p>strpos 函数查找字符串在另一个字符串中出现的位置并返回</p><h4 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h4><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>===<span class="hljs-string">&quot;6666&quot;</span>)&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);    &#125;    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z]/i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);    &#125;    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$num</span>, <span class="hljs-string">&quot;0&quot;</span>))&#123;           <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);    &#125;    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">6666</span>)&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>解析： preg_match 函数过滤了26的英文字母（包括大小写）</p><p>所以通过16进制来获取flag的方法是不可取的，可以考虑使用8进制来绕过，6666的八进制为 15012 在前面加上0 表示 8进制</p><p>所以传入 <code>015012</code></p><p>会发现还是不行，这是因为 第三条 if函数 控制了第一个传入的字符不能为 0 所以被ban掉了</p><p>可以尝试在传参前面加上一个空格</p><p>payload:</p><p>&#96;&#96;&#96;num&#x3D; 05012&#96;&#96;</p><h1 id="in-array-函数"><a href="#in-array-函数" class="headerlink" title="in_array 函数"></a>in_array 函数</h1><p>考点： 函数的作用是检查数组中是否存在某个值，当函数中</p>]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>CTF</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
