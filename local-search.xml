<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Test</title>
    <link href="/posts/784dd132.html"/>
    <url>/posts/784dd132.html</url>
    
    <content type="html"><![CDATA[<p>j</p><p>a’s’da’s’da’s’d</p><p>阿斯顿</p><p>截图</p><p><img src="/posts/784dd132.htm/image-20250708191528993.png" alt="image-20250708191528993"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vulfocus|命令执行漏洞WP</title>
    <link href="/posts/83c1bda7.html"/>
    <url>/posts/83c1bda7.html</url>
    
    <content type="html"><![CDATA[<h1 id="1-运行环境"><a href="#1-运行环境" class="headerlink" title="1.运行环境"></a>1.运行环境</h1><p>进入首页 返回 index.php?cmd&#x3D;ls &#x2F;tmp</p><h1 id="2-将其拼接到浏览器-url-栏后面"><a href="#2-将其拼接到浏览器-url-栏后面" class="headerlink" title="2.将其拼接到浏览器 url 栏后面"></a>2.将其拼接到浏览器 url 栏后面</h1><p>发现输出了一段文字，但是看的不是很明显，CTRL+U 查看页面源代码</p><p>发现有两行东西，这就说明这个目录下面就一个index.php 文件</p><p>推测执行了 ls 系统命令</p><h1 id="3-替换其他指令查找-flag"><a href="#3-替换其他指令查找-flag" class="headerlink" title="3.替换其他指令查找 flag"></a>3.替换其他指令查找 flag</h1><p>执行下列命令</p><div class="code-wrapper"><pre><code class="hljs bash">find / -name <span class="hljs-string">&#x27;*flag*&#x27;</span></code></pre></div><p>获得flag</p><p>flag-{bmh8bd27630-a4fd-4bfa-a7c8-61af1a1f0f0b}</p>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令执行</tag>
      
      <tag>WriteUp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python-Django开发</title>
    <link href="/posts/2bf21027.html"/>
    <url>/posts/2bf21027.html</url>
    
    <content type="html"><![CDATA[<h1 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h1><ul><li>创建 env 环境</li></ul><div class="code-wrapper"><pre><code class="hljs bash">python -m venv <span class="hljs-built_in">env</span></code></pre></div><ul><li>启动虚拟环境</li></ul><div class="code-wrapper"><pre><code class="hljs bash">./env/Scripts/activate</code></pre></div><h1 id="运行第一个-Django-程序"><a href="#运行第一个-Django-程序" class="headerlink" title="运行第一个 Django 程序"></a>运行第一个 Django 程序</h1><ul><li>安装 django 库</li></ul><div class="code-wrapper"><pre><code class="hljs bash">pip install django</code></pre></div><ul><li>初始化 django 项目</li></ul><div class="code-wrapper"><pre><code class="hljs bash">django-admin startproject website</code></pre></div><ul><li>启动 django 项目</li></ul><div class="code-wrapper"><pre><code class="hljs bash">python ./website/manage.py runserver</code></pre></div><ul><li>切换端口号</li></ul><div class="code-wrapper"><pre><code class="hljs bash">python manage.py runserver 8888</code></pre></div><h2 id="修改首页并输出-Hello-world"><a href="#修改首页并输出-Hello-world" class="headerlink" title="修改首页并输出 Hello world"></a>修改首页并输出 Hello world</h2><ul><li>在根目录下新建 views.py</li></ul><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):  <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;Hello world&quot;</span>)</code></pre></div><ul><li>修改 urls.py 文件</li></ul><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#urls.py</span><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views   <span class="hljs-comment">#导入 views.py </span>urlpatterns = [    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),    path(<span class="hljs-string">&#x27;&#x27;</span>,views.index,name=<span class="hljs-string">&quot;asd&quot;</span>), ]</code></pre></div><h1 id="django-admin-命令详解"><a href="#django-admin-命令详解" class="headerlink" title="django-admin 命令详解"></a>django-admin 命令详解</h1><ul><li>查看 django-admin 提供的所有命令</li></ul><div class="code-wrapper"><pre><code class="hljs bash">django-admin <span class="hljs-built_in">help</span></code></pre></div><h2 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h2><div class="code-wrapper"><pre><code class="hljs bash">django-admin startproject</code></pre></div><p>在当前目录下创建一个新的django项目，包括最基本的目录</p><ul><li>项目名称 &#x2F;: 项目主目录<ul><li>__init__ .py</li><li>settings.py 配置文件</li><li>urls.py : URL路由配置</li><li>wsgi.py ：WSGI 应用入口</li></ul></li></ul><h2 id="创建新应用"><a href="#创建新应用" class="headerlink" title="创建新应用"></a>创建新应用</h2><div class="code-wrapper"><pre><code class="hljs pyhon">django-admin startapp 应用名称</code></pre></div><p>创建一个新的 django 应用，包含：</p><ul><li>migrations&#x2F;：数据库迁移文件目录</li><li><em>_init</em>_.py</li><li>admin.py：管理后台配置</li><li>apps.py：应用配置</li><li>models.py：数据库模型定义</li><li>tests.py：测试代码</li><li>views.py：试图函数</li></ul><h2 id="检查项目配置"><a href="#检查项目配置" class="headerlink" title="检查项目配置"></a>检查项目配置</h2><div class="code-wrapper"><pre><code class="hljs bash">django-admin check</code></pre></div><p>这个命令会检查 django 项目是否有配置错误，包括：</p><ul><li>模型定义是否正确</li><li>url 配置是否有效</li><li>模板设置是否正确</li><li>静态文件配置等</li></ul><h2 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h2><p>django 使用迁移系统来管理数据库模式变更</p><div class="code-wrapper"><pre><code class="hljs bash">django-admin makemigrations <span class="hljs-comment"># 创建迁移文件</span>django-admin migrate        <span class="hljs-comment"># 应用迁移到数据库</span></code></pre></div><h2 id="创建超级用户"><a href="#创建超级用户" class="headerlink" title="创建超级用户"></a>创建超级用户</h2><blockquote><p>引导用户创建一个可以访问django 管理后台的超级用户</p></blockquote><div class="code-wrapper"><pre><code class="hljs bash">django-admin createsuperuser</code></pre></div><h1 id="django-admin-常用命令"><a href="#django-admin-常用命令" class="headerlink" title="django-admin 常用命令"></a>django-admin 常用命令</h1><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>startproject</td><td>创建一个新的django项目</td></tr><tr><td>startapp</td><td>创建一个新的django应用</td></tr><tr><td>runserver</td><td>启动开发服务器</td></tr><tr><td>makemigrations</td><td>生成数据库迁移文件</td></tr><tr><td>migrate</td><td>执行数据库迁移</td></tr><tr><td>shell</td><td>启动 django 交互式shell</td></tr><tr><td>collectstatic</td><td>收集静态文件（用于生产环境）</td></tr><tr><td>test</td><td>运行单元测试</td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python创建env虚拟环境</title>
    <link href="/posts/3b86160f.html"/>
    <url>/posts/3b86160f.html</url>
    
    <content type="html"><![CDATA[<h1 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h1><div class="code-wrapper"><pre><code class="hljs bash">python -m venv <span class="hljs-built_in">env</span></code></pre></div><h1 id="启动虚拟环境"><a href="#启动虚拟环境" class="headerlink" title="启动虚拟环境"></a>启动虚拟环境</h1><div class="code-wrapper"><pre><code class="hljs python">./env/scripts/activate</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python-PyMySQL</title>
    <link href="/posts/db284c9b.html"/>
    <url>/posts/db284c9b.html</url>
    
    <content type="html"><![CDATA[<h1 id="安装-PyMySQL"><a href="#安装-PyMySQL" class="headerlink" title="安装 PyMySQL"></a>安装 PyMySQL</h1><div class="code-wrapper"><pre><code class="hljs bash">pip install PyMySQL</code></pre></div><h1 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h1><blockquote><p>开启 mysql 地址为 localhost:3306 用户名为 root 密码为 root</p></blockquote><ul><li>创建数据库连接</li></ul><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysqldbconn = pymysql.connect(  host=<span class="hljs-string">&#x27;localhost&#x27;</span>,  user=<span class="hljs-string">&#x27;root&#x27;</span>,  password=<span class="hljs-string">&#x27;root&#x27;</span>,  database=<span class="hljs-string">&#x27;test&#x27;</span>)</code></pre></div><ul><li>使用 cursor() 方法创建一个游标对象 cursor</li></ul><div class="code-wrapper"><pre><code class="hljs python">cursor = dbconn.cursor()</code></pre></div><ul><li>使用 excute() 方法执行sql查询</li></ul><div class="code-wrapper"><pre><code class="hljs python">cursor.excute(<span class="hljs-string">&quot;select user()&quot;</span>)</code></pre></div><ul><li>使用 fetchone() 方法获取一条数据</li></ul><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">str</span> = cursor.fetchone()</code></pre></div><ul><li>关闭数据库连接</li></ul><div class="code-wrapper"><pre><code class="hljs python">dbconn.close()</code></pre></div><ul><li>创建数据表</li></ul><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span> <span class="hljs-keyword">import</span> pymysql <span class="hljs-comment"># 打开数据库连接</span>db = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>,                     user=<span class="hljs-string">&#x27;testuser&#x27;</span>,                     password=<span class="hljs-string">&#x27;test123&#x27;</span>,                     database=<span class="hljs-string">&#x27;TESTDB&#x27;</span>) <span class="hljs-comment"># 使用 cursor() 方法创建一个游标对象 cursor</span>cursor = db.cursor() <span class="hljs-comment"># 使用 execute() 方法执行 SQL，如果表存在则删除</span>cursor.execute(<span class="hljs-string">&quot;DROP TABLE IF EXISTS EMPLOYEE&quot;</span>) <span class="hljs-comment"># 使用预处理语句创建表</span>sql = <span class="hljs-string">&quot;&quot;&quot;CREATE TABLE EMPLOYEE (</span><span class="hljs-string">         FIRST_NAME  CHAR(20) NOT NULL,</span><span class="hljs-string">         LAST_NAME  CHAR(20),</span><span class="hljs-string">         AGE INT,  </span><span class="hljs-string">         SEX CHAR(1),</span><span class="hljs-string">         INCOME FLOAT )&quot;&quot;&quot;</span> cursor.execute(sql) <span class="hljs-comment"># 关闭数据库连接</span>db.close()</code></pre></div><h1 id="使用预处理方法防止SQL注入"><a href="#使用预处理方法防止SQL注入" class="headerlink" title="使用预处理方法防止SQL注入"></a>使用预处理方法防止SQL注入</h1><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span> <span class="hljs-keyword">import</span> pymysql <span class="hljs-comment"># 打开数据库连接</span>db = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>,                     user=<span class="hljs-string">&#x27;testuser&#x27;</span>,                     password=<span class="hljs-string">&#x27;test123&#x27;</span>,                     database=<span class="hljs-string">&#x27;TESTDB&#x27;</span>) <span class="hljs-comment"># 使用 cursor() 方法创建一个游标对象 cursor</span>cursor = db.cursor() sql = <span class="hljs-string">&#x27;SELECT * FROM user where username = %s&#x27;</span> cursor.execute(sql,(username,))<span class="hljs-comment"># 关闭数据库连接</span>db.close()</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python-列表、元组、字典、集合</title>
    <link href="/posts/df8caf15.html"/>
    <url>/posts/df8caf15.html</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><ul><li>序列类型：列表、元组、字符串</li><li>映射类型：字典</li><li>集合类型：集合、冻结集合</li></ul><h1 id="列表-List"><a href="#列表-List" class="headerlink" title="列表 (List)"></a>列表 (List)</h1><blockquote><p>列表是Python中最灵活的有序的集合类型</p></blockquote><h2 id="列表的基本特性"><a href="#列表的基本特性" class="headerlink" title="列表的基本特性"></a>列表的基本特性</h2><ul><li>有序的集合，元素按照插入的顺序排列</li><li>可变，可以修改内容</li><li>可以包含任意类型的对象 , 可以嵌套使用</li><li>使用方括号[]，元素之间用逗号分隔</li></ul><p>eg :</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">123</span>,<span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-number">1.2</span>,<span class="hljs-number">1e10</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]]</code></pre></div><h2 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h2><blockquote><p>列表实际上是一个动态数组，而不是链表</p><p>列表在内存中分配的空间通常比实际需要的多，这是为了优化追加的操作</p><p>平均世间复杂度为o(1)</p><p>列表元素在内存中不连续存储，列表只存储指向各个元素的指针</p></blockquote><h2 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h2><ul><li>普通方式</li></ul><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = []<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<span class="hljs-built_in">list</span>.append(i)</code></pre></div><ul><li>推导式</li></ul><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<span class="hljs-comment">##带有条件的情况</span><span class="hljs-built_in">list</span> = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]</code></pre></div><h2 id="列表的输出"><a href="#列表的输出" class="headerlink" title="列表的输出"></a>列表的输出</h2><blockquote><p>与字符串的索引一样，列表索引从0开始，第二个索引为1，最后一个元素的索引也可以是-1</p></blockquote><ul><li>直接输出</li></ul><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)</code></pre></div><ul><li>访问列表中的值</li></ul><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>])</code></pre></div><ul><li>截取字符串</li></ul><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])</code></pre></div><h2 id="更新列表"><a href="#更新列表" class="headerlink" title="更新列表"></a>更新列表</h2><blockquote><p>使用 append() 方法</p></blockquote><p>eg：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<span class="hljs-built_in">list</span>.append(<span class="hljs-number">7</span>)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)</code></pre></div><h2 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h2><blockquote><ol><li>使用del语句</li><li>使用 remove() 方法</li><li>使用 pop() 方法</li></ol></blockquote><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<span class="hljs-built_in">list</span>.pop(<span class="hljs-number">1</span>)<span class="hljs-keyword">del</span> <span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>]<span class="hljs-built_in">list</span>.remove(<span class="hljs-number">1</span>)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)</code></pre></div><h2 id="列表脚本操作符"><a href="#列表脚本操作符" class="headerlink" title="列表脚本操作符"></a>列表脚本操作符</h2><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>len([1,2,3])</td><td>长度</td></tr><tr><td>[1,2,3]+[4,5,6]</td><td>组合</td></tr><tr><td>[1]*4</td><td>重复</td></tr><tr><td>3 in [1,2,3]</td><td>元素是否存在列表中</td></tr><tr><td>for x in [1,2,3]:print(x,end&#x3D;” “)</td><td>迭代</td></tr></tbody></table><h2 id="列表常用函数-方法"><a href="#列表常用函数-方法" class="headerlink" title="列表常用函数&amp;方法"></a>列表常用函数&amp;方法</h2><ul><li>python 包含一下函数</li></ul><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>len()</td><td>列表元素个数</td></tr><tr><td>max()</td><td>返回最大值</td></tr><tr><td>min()</td><td>返回最小值</td></tr><tr><td>list(seq)</td><td>将元组转换为列表</td></tr></tbody></table><ul><li>python 包含以下方法</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>list.append()</td><td>在列表末尾追加新的对象</td></tr><tr><td>list.count()</td><td>统计某个元素在列表中出现的次数</td></tr><tr><td>list.extend()</td><td>在列表末尾一次性追加另一个序列中的多个值</td></tr><tr><td>list.index()</td><td>从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td>list.insert(index, obj)</td><td>将对象插入列表</td></tr><tr><td>list.pop()</td><td>移除列表中第一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td>list.remove()</td><td>移除列表中某个值的第一个匹配项</td></tr><tr><td>list.reverse()</td><td>反向列表中的元素</td></tr><tr><td>list.sort(key&#x3D;None,reverse&#x3D;False)</td><td>对列表进行排序</td></tr><tr><td>list.clear()</td><td>清空列表</td></tr><tr><td>list.copy()</td><td>复制</td></tr></tbody></table><h1 id="元组（Tuple）"><a href="#元组（Tuple）" class="headerlink" title="元组（Tuple）"></a>元组（Tuple）</h1><blockquote><p>元组与列表类似，不同之处在于元组的元素不能修改</p><p>元组使用 () 小括号，列表使用方括号 []</p><p>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开</p></blockquote><p>eg：</p><div class="code-wrapper"><pre><code class="hljs python">tup1 = (<span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;baidu&quot;</span>,<span class="hljs-string">&quot;github&quot;</span>,<span class="hljs-string">&quot;bing&quot;</span>)</code></pre></div><p>创建空元组</p><div class="code-wrapper"><pre><code class="hljs python">tup1 = ()</code></pre></div><blockquote><p>注意：当元组中只包含一个元素时，需要在元素后面加逗号. 否则括号会被当做运算符使用</p></blockquote><h2 id="访问元组"><a href="#访问元组" class="headerlink" title="访问元组"></a>访问元组</h2><p>和列表一样，元组可以使用下标索引来访问元组中的值</p><p>eg：</p><div class="code-wrapper"><pre><code class="hljs python">tup1 = (<span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;baidu&quot;</span>,<span class="hljs-string">&quot;github&quot;</span>,<span class="hljs-string">&quot;bing&quot;</span>)<span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;tup1[0]: &quot;</span>, tup1[<span class="hljs-number">0</span>])</code></pre></div><h2 id="修改元组"><a href="#修改元组" class="headerlink" title="修改元组"></a>修改元组</h2><blockquote><p>元组中的元素是不允许被修改的，但是可以对元组进行连接组合</p></blockquote><p>eg：</p><div class="code-wrapper"><pre><code class="hljs python">tup1 = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)tup2 = (<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<span class="hljs-comment">#tup1[0]=0  这种操作是非法的</span>tup3 = tup1 + tup2</code></pre></div><h2 id="删除元组"><a href="#删除元组" class="headerlink" title="删除元组"></a>删除元组</h2><blockquote><p>元组中的元素值不允许被删除，但是可以使用del 语句来删除整个元组</p></blockquote><p>eg：</p><div class="code-wrapper"><pre><code class="hljs python">tup1 = (<span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;baidu&quot;</span>,<span class="hljs-string">&quot;github&quot;</span>,<span class="hljs-string">&quot;bing&quot;</span>)<span class="hljs-keyword">del</span> tup1</code></pre></div><h2 id="元组的运算"><a href="#元组的运算" class="headerlink" title="元组的运算"></a>元组的运算</h2><blockquote><p>与字符串一样，元组之间可以使用 +、+&#x3D;、*号进行运算</p></blockquote><p>eg： 复制</p><div class="code-wrapper"><pre><code class="hljs python">tup1 = (<span class="hljs-string">&quot;asd&quot;</span>,)*<span class="hljs-number">4</span></code></pre></div><h2 id="元组的内置函数"><a href="#元组的内置函数" class="headerlink" title="元组的内置函数"></a>元组的内置函数</h2><blockquote><p>基本和列表相同，不再赘述</p></blockquote><p>计算个数、最大值、最小值</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>tuple(iterable)</td><td>将可迭代系列转换为元组</td></tr></tbody></table><h1 id="字典（Dict）"><a href="#字典（Dict）" class="headerlink" title="字典（Dict）"></a>字典（Dict）</h1><blockquote><p>字典是另一种可变容器模型，且可存储任意类型对象</p><p>字典的每个键值 key&#x3D;&gt;value 用冒号:分割，每个对之间用逗号分隔，整个字典包括在花括号中</p></blockquote><div class="code-wrapper"><pre><code class="hljs python">d = &#123;key1 : value1, key2 : value2, key3 : value3 &#125;</code></pre></div><blockquote><p>注意：dict作为python的关键字和内置函数，变量名不建议命名为dict</p></blockquote><p>键 必须是唯一的，但值不必</p><p>值可以取任何数据类型，但键必须是不可变的，如字符串，数字</p><div class="code-wrapper"><pre><code class="hljs python">tinydict = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;runoob&#x27;</span>, <span class="hljs-string">&#x27;likes&#x27;</span>: <span class="hljs-number">123</span>, <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">&#x27;www.runoob.com&#x27;</span>&#125;</code></pre></div><h2 id="创建空字典"><a href="#创建空字典" class="headerlink" title="创建空字典"></a>创建空字典</h2><ul><li>使用花括号 {} 创建空字典</li></ul><div class="code-wrapper"><pre><code class="hljs python">emptyDict = &#123;&#125;</code></pre></div><ul><li>使用内置函数 dict() 创建空字典</li></ul><div class="code-wrapper"><pre><code class="hljs python">emptyDict = <span class="hljs-built_in">dict</span>()</code></pre></div><h2 id="访问字典中的值"><a href="#访问字典中的值" class="headerlink" title="访问字典中的值"></a>访问字典中的值</h2><div class="code-wrapper"><pre><code class="hljs python">tinydict = &#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Runoob&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;Class&#x27;</span>: <span class="hljs-string">&#x27;First&#x27;</span>&#125; <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;tinydict[&#x27;Name&#x27;]: &quot;</span>, tinydict[<span class="hljs-string">&#x27;Name&#x27;</span>])<span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;tinydict[&#x27;Age&#x27;]: &quot;</span>, tinydict[<span class="hljs-string">&#x27;Age&#x27;</span>])</code></pre></div><h2 id="修改字典"><a href="#修改字典" class="headerlink" title="修改字典"></a>修改字典</h2><div class="code-wrapper"><pre><code class="hljs python">tinydict = &#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Runoob&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;Class&#x27;</span>: <span class="hljs-string">&#x27;First&#x27;</span>&#125; tinydict[<span class="hljs-string">&#x27;Age&#x27;</span>] = <span class="hljs-number">8</span>               <span class="hljs-comment"># 更新 Age</span>tinydict[<span class="hljs-string">&#x27;School&#x27;</span>] = <span class="hljs-string">&quot;菜鸟教程&quot;</span>  <span class="hljs-comment"># 添加信息</span></code></pre></div><h2 id="删除字典中的元素"><a href="#删除字典中的元素" class="headerlink" title="删除字典中的元素"></a>删除字典中的元素</h2><ul><li>使用del 语句删除字典</li></ul><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 删除键‘Name’</span><span class="hljs-keyword">del</span> qweDict[<span class="hljs-string">&#x27;Name&#x27;</span>]<span class="hljs-comment"># 删除整个字典</span><span class="hljs-keyword">del</span> qweDict</code></pre></div><blockquote><p>del 删除后整个字典不再存在</p></blockquote><ul><li>清空字典</li></ul><div class="code-wrapper"><pre><code class="hljs python">qweDict.clear()</code></pre></div><h2 id="字典键的特性"><a href="#字典键的特性" class="headerlink" title="字典键的特性"></a>字典键的特性</h2><ul><li>不允许同一个键出现两次，创建时同一个键如果被赋值两次，后一个值会被记住</li><li>键必须不可变，所以可以用数字，字符串或元组充当，而列表就不行</li></ul><h2 id="字典内置函数-方法"><a href="#字典内置函数-方法" class="headerlink" title="字典内置函数&amp;方法"></a>字典内置函数&amp;方法</h2><ul><li>python字典包含以下内置函数</li></ul><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>len()</td><td>计算元素个数</td></tr><tr><td>str()</td><td>输出字典</td></tr><tr><td>type()</td><td>返回输入的变量类型，如果变量是字典，就返回字典类型</td></tr></tbody></table><ul><li>python字典包含以下内置方法</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>dict.clear()</td><td>删除字典内所有元素</td></tr><tr><td>dict.copy()</td><td>返回一个字典的浅复制</td></tr><tr><td>dict.formkeys()</td><td>创建一个新的字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</td></tr><tr><td>dict.get(key, default&#x3D;None)</td><td>返回执行键的值，如果键不在字典中返回default 设置的默认值</td></tr><tr><td>key in dict</td><td>如果键在字典返回true，否返回false</td></tr><tr><td>dict.items()</td><td>以列表返回一个试图对象</td></tr><tr><td>dict.keys()</td><td>返回一个试图对象</td></tr><tr><td>dict.setdefault(key,dafault&#x3D;None)</td><td>和get()类似，但如果键不在字典中，将回添加键并将值设为default</td></tr><tr><td>dict.update(dict2)</td><td>把字典dict2的键值对更新到dict中</td></tr><tr><td>dict.values()</td><td>返回一个试图对象</td></tr><tr><td>dict.pop(key)</td><td>删除字典key所对应的值，并返回被删除的值</td></tr><tr><td>dict.popitem()</td><td>返回并删除字典中最后一对键和值</td></tr></tbody></table><h1 id="集合（Set）"><a href="#集合（Set）" class="headerlink" title="集合（Set）"></a>集合（Set）</h1><blockquote><p>集合是一个无序的不重复的元素序列</p><p>集合中的元素不会重复，并且可以进行交集，并集，差集等常见的集合操作</p><p>可以使用花括号{}创建集合，元素之间用逗号，分隔，或者也可以使用set()函数创建</p></blockquote><p>eg：</p><div class="code-wrapper"><pre><code class="hljs python">set1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;set2 = <span class="hljs-built_in">set</span>([<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>])</code></pre></div><blockquote><p>注意：创建空集合时必须用set()函数，因为 {} 用来创建一个空字典</p></blockquote><h2 id="集合内置方法整合表"><a href="#集合内置方法整合表" class="headerlink" title="集合内置方法整合表"></a>集合内置方法整合表</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>add()</td><td>为集合添加元素</td></tr><tr><td>clear()</td><td>移除集合中的所有元素</td></tr><tr><td>copy()</td><td>拷贝多个集合的差集</td></tr><tr><td>difference()</td><td>返回多个集合的差集</td></tr><tr><td>difference_update()</td><td>移除集合中的元素，该元素在指定的集合中也存在</td></tr><tr><td>discard()</td><td>删除集合中指定的元素</td></tr><tr><td>intersection()</td><td>返回集合的交集</td></tr><tr><td>intersection_update()</td><td>返回集合的交集</td></tr><tr><td>isdisjoint()</td><td>判断两个集合是否包含相同的元素，如果没有返回 True，否则返回False</td></tr><tr><td>issubset()</td><td>判断指定集合是否为该方法参数集合的子集</td></tr><tr><td>issuperset()</td><td>判断该方法的参数集合是否为指定集合的子集</td></tr><tr><td>pop()</td><td>随机移除元素</td></tr><tr><td>remove()</td><td>移除指定元素</td></tr><tr><td>symmetric_difference()</td><td>返回两个集合中不重复的元素集合</td></tr><tr><td>sysmmetric_difference_update()</td><td>移除当前集合中在另外一个指定集合中相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中</td></tr><tr><td>union()</td><td>返回两个集合的并集</td></tr><tr><td>update()</td><td>给集合添加元素</td></tr><tr><td>len()</td><td>计算集合元素的个数</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>开发</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python开发-Flask框架</title>
    <link href="/posts/483d9cef.html"/>
    <url>/posts/483d9cef.html</url>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p>pip install flask</p></blockquote><h1 id="基础入门"><a href="#基础入门" class="headerlink" title="基础入门"></a>基础入门</h1><ul><li>实例化一个Flask对象，创建一个路由，实现一个基本的页面</li></ul><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flaskapp = Flask(__name__)<span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello world&quot;</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:     <span class="hljs-comment">#当py文件被执行时，if下面的代码块将被运行</span>    <span class="hljs-comment">#当py文件以模块形式被导入时，下面的代码块不被运行</span>    app.debug = <span class="hljs-literal">True</span>   <span class="hljs-comment">#开启调试模式，修改完代码之后不必重启程序</span>    app.run()</code></pre></div><p>route 之后的字符串表示拼接到 <code>localhost:5000</code> 后面的参数</p><p>&lt;&gt; 之中的传参可以带入到页面当中</p><ul><li>指定一个路由</li></ul><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/name/&lt;name&gt;&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><span class="hljs-comment">#method 指定传参方式 POST或者GET方式</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">putName</span>(<span class="hljs-params">name</span>):  <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Hello <span class="hljs-subst">&#123;name&#125;</span>&#x27;</span></code></pre></div><h2 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h2><ul><li>首先引入 request</li></ul><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request</code></pre></div><ul><li>GET 方式接受传参</li></ul><div class="code-wrapper"><pre><code class="hljs python">request.args.get(<span class="hljs-string">&#x27;传参变量名&#x27;</span>)</code></pre></div><ul><li>POST 方式接受传参</li></ul><div class="code-wrapper"><pre><code class="hljs python">request.form(<span class="hljs-string">&#x27;传参变量名&#x27;</span>)</code></pre></div><p>eg：</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/method&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>]</span>) </span><span class="hljs-comment"># methods 表示可以接受的传参方式</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>():<span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:        name = requset.args.get(<span class="hljs-string">&#x27;name&#x27;</span>)<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;GET !!!&quot;</span> + name<span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:        name = request.form[<span class="hljs-string">&#x27;name&#x27;</span>]<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;POST !!!&quot;</span> + name</code></pre></div><h1 id="redirect-重定向"><a href="#redirect-重定向" class="headerlink" title="redirect 重定向"></a>redirect 重定向</h1><ul><li>引入 redirect 和 url_for</li></ul><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask imprt Flask,request,redirect,url_for</code></pre></div><p>eg:</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>,method=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():key = <span class="hljs-string">&quot;123456&quot;</span>UserKey = request.args.get(<span class="hljs-string">&#x27;key&#x27;</span>)<span class="hljs-keyword">if</span> UserKey == key:<span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login_ed&#x27;</span>))<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login_ed&#x27;</span>,method=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><span class="hljs-comment">#定义一个新的页面</span></code></pre></div><h1 id="模板渲染"><a href="#模板渲染" class="headerlink" title="模板渲染"></a>模板渲染</h1><ul><li>首先在项目目录下建一个  <code>template</code> 文件夹，建立 html文件</li></ul><div class="code-wrapper"><pre><code class="hljs jinja2">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;Hello &#123;&#123;name&#125;&#125;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></div><ul><li>渲染 index.html 的同时 向文件传参 将name变量渲染</li></ul><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,render_template<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/name/&lt;name&gt;&#x27;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">name</span>):  <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>,name=name)</code></pre></div><h2 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h2><ul><li>编写base页面</li></ul><div class="code-wrapper"><pre><code class="hljs jinja2">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;&#123;% block title %&#125;BasePage&#123;% endblock %&#125;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &#123;% block content %&#125;main&#123;% endblock %&#125;    homepage&lt;/body&gt;&lt;/html&gt;</code></pre></div><ul><li>编写 test1.html</li></ul><div class="code-wrapper"><pre><code class="hljs jinja2">&#123;% extends &quot;base.html&quot; %&#125;&#123;% block title %&#125;Home Page&#123;% endblock %&#125;&#123;% block content %&#125;&lt;h2&gt;Welcome to the Home Page!&lt;/h2&gt;&lt;p&gt;Hello &#123;&#123;name&#125;&#125;&lt;/p&gt;&#123;% endblock %&#125;</code></pre></div><h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><ul><li>分支结构</li></ul><div class="code-wrapper"><pre><code class="hljs jinja2">&#123;% if name == &quot;Lixiney&quot; %&#125;&lt;p&gt;Hello admin&lt;/p&gt;&#123;% else %&#125;&lt;p&gt;Hello &#123;&#123;name&#125;&#125;&lt;/p&gt;&#123;% endif %&#125;</code></pre></div><ul><li>循环结构</li></ul><div class="code-wrapper"><pre><code class="hljs jinja2">&#123;% for person in name %&#125;&lt;p&gt;&#123;&#123;person&#125;&#125;&lt;/p&gt;&lt;br&gt;&#123;% endfor %&#125;</code></pre></div><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><blockquote><p>过滤器用于在模板中格式化和处理变量数据</p></blockquote><div class="code-wrapper"><pre><code class="hljs jinja2">&lt;p&gt;&#123;&#123; name|capitalize &#125;&#125;&lt;/p&gt;&lt;p&gt;&#123;&#123; price|round(2) &#125;&#125;&lt;/p&gt;</code></pre></div><div class="code-wrapper"><pre><div class="caption"><span>name|capitalize &#125;&#125;``` 将 name 变量的值首字母大写</span></div><code class="hljs &#123;&#123;">```&#123;&#123; price|round(2) &#125;&#125;``` 将 price 变量的值四舍五入到小数点后两位## 宏和模板包含&gt; 在一个模板中插入另一个模板的内容* 创建宏创建 templates/macos.html```jinja2&#123;% macro render_item(item) %&#125;    &lt;div&gt;        &lt;h3&gt;&#123;&#123; item.title &#125;&#125;&lt;/h3&gt;        &lt;p&gt;&#123;&#123; item.description &#125;&#125;&lt;/p&gt;    &lt;/div&gt;&#123;% endmacro %&#125;</code></pre></div><ul><li>使用宏</li></ul><p>创建 templates&#x2F;index.html</p><div class="code-wrapper"><pre><code class="hljs jinja2">&#123;% from &quot;macros.html&quot; import render_item %&#125;&lt;h1&gt;Items&lt;/h1&gt;&#123;% for item in items %&#125;    &#123;&#123; render_item(item) &#125;&#125;&#123;% endfor %&#125;</code></pre></div><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><blockquote><p>用户输入的内容会被自动转义，以避免恶意代码注入</p></blockquote><div class="code-wrapper"><pre><code class="hljs jinja2">&lt;p&gt;&#123;&#123; user_input &#125;&#125;&lt;/p&gt;</code></pre></div><h2 id="模板上下文"><a href="#模板上下文" class="headerlink" title="模板上下文"></a>模板上下文</h2><ul><li>传入一个字典类型</li></ul><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/profile/&lt;username&gt;&#x27;</span></span>)</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">profile</span>(<span class="hljs-params">username</span>):    user = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: username, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">25</span>&#125;    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;profile.html&#x27;</span>, user=user)</code></pre></div><ul><li>引用方法</li></ul><div class="code-wrapper"><pre><code class="hljs jinja2">&lt;h1&gt;&#123;&#123; user.name &#125;&#125;&lt;/h1&gt;&lt;p&gt;Age: &#123;&#123; user.age &#125;&#125;&lt;/p&gt;</code></pre></div><h1 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h1>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sqli-Labs 通关文档</title>
    <link href="/posts/879a70bf.html"/>
    <url>/posts/879a70bf.html</url>
    
    <content type="html"><![CDATA[<h1 id="Less-01"><a href="#Less-01" class="headerlink" title="Less-01"></a>Less-01</h1><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>WriteUp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络安全</tag>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql增删改查基础</title>
    <link href="/posts/b710732f.html"/>
    <url>/posts/b710732f.html</url>
    
    <content type="html"><![CDATA[<h3 id="首先启动数据库"><a href="#首先启动数据库" class="headerlink" title="首先启动数据库"></a>首先启动数据库</h3><ul><li>Linux :</li></ul><div class="code-wrapper"><pre><code class="hljs sql">sudo systemctl <span class="hljs-keyword">start</span> mysql</code></pre></div><div class="code-wrapper"><pre><code class="hljs bash">mysql -h 数据库地址 -u 用户名 -p 密码</code></pre></div><ul><li>windows：<ul><li>进入mysql 目录下的 bin 目录，打开cmd</li></ul></li></ul><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;</code></pre></div><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><div class="code-wrapper"><pre><code class="hljs sql">use [数据库名];</code></pre></div><h3 id="查看数据表"><a href="#查看数据表" class="headerlink" title="查看数据表"></a>查看数据表</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> tables;</code></pre></div><h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">desc</span> [数据表名];</code></pre></div><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><h3 id="创建一个数据库"><a href="#创建一个数据库" class="headerlink" title="创建一个数据库"></a>创建一个数据库</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database [数据库名];</code></pre></div><h3 id="创建一个数据表"><a href="#创建一个数据表" class="headerlink" title="创建一个数据表"></a>创建一个数据表</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> [数据表名] (    字段名<span class="hljs-number">1</span> 字段类型，    字段名<span class="hljs-number">2</span> 字段类型);</code></pre></div><p>eg:</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> <span class="hljs-keyword">user</span> (    id <span class="hljs-type">int</span>(<span class="hljs-number">20</span>),    name <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),    password <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>));</code></pre></div><h3 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> aaa <span class="hljs-keyword">values</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2.</span>..);</code></pre></div><p>注意 插入的字段数必须和表结构中原有的字段数相同</p><p>方法2：指定字段添加数据</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> aaa (字段<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span>) <span class="hljs-keyword">values</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>);</code></pre></div><p>注意：值如果是整型不用加引号，如果是字符串必须加引号</p><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> database [数据库名];</code></pre></div><h3 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> [数据表名];</code></pre></div><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> [表名] <span class="hljs-keyword">where</span> 条件</code></pre></div><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> 表名<span class="hljs-keyword">set</span> 字段名<span class="hljs-number">1</span> <span class="hljs-operator">=</span> 字段值<span class="hljs-number">1</span> ， [字段名<span class="hljs-number">2</span> <span class="hljs-operator">=</span> 字段值<span class="hljs-number">2</span>]；<span class="hljs-keyword">where</span> 条件语句；# <span class="hljs-keyword">where</span> <span class="hljs-operator">+</span> 条件 更新部分数据 <span class="hljs-operator">||</span> 不加<span class="hljs-keyword">where</span>子句更新全部数据</code></pre></div><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><h3 id="普通查询"><a href="#普通查询" class="headerlink" title="普通查询"></a>普通查询</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> [字段] <span class="hljs-keyword">from</span> [表] <span class="hljs-keyword">where</span> 条件</code></pre></div><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> [字段] <span class="hljs-keyword">from</span> [表] <span class="hljs-keyword">where</span> [字段] <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> [字段] <span class="hljs-keyword">from</span> [表] <span class="hljs-keyword">where</span> [条件])</code></pre></div><p>eg:</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> artical1 <span class="hljs-keyword">where</span> <span class="hljs-keyword">value</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;helloworld&#x27;</span>);</code></pre></div><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p>条件：表1 和 表2 的字段数必须相同</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span></code></pre></div><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>下划线通配符 （_）</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> str <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%str%&#x27;</span>;</code></pre></div>]]></content>
    
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF-PHP代码审计</title>
    <link href="/posts/5fe44501.html"/>
    <url>/posts/5fe44501.html</url>
    
    <content type="html"><![CDATA[<h1 id="is-numeric-函数"><a href="#is-numeric-函数" class="headerlink" title="is_numeric 函数"></a>is_numeric 函数</h1><div class="code-wrapper"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$num</span></span>)</span>&#123;    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;0x&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);    <span class="hljs-keyword">return</span> <span class="hljs-variable">$num</span>;&#125;<span class="hljs-variable">$num</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$num</span>) <span class="hljs-keyword">and</span> <span class="hljs-variable">$num</span>!==<span class="hljs-string">&#x27;36&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$num</span>)!==<span class="hljs-string">&#x27;36&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$num</span>)==<span class="hljs-string">&#x27;36&#x27;</span>)&#123;    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-string">&#x27;36&#x27;</span>)&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker!!&quot;</span>;    &#125;&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker!!!&quot;</span>;&#125;</code></pre></div><p>绕过 ： 前面加上 %09 %0a %0b %0c %0d 等空字符</p><p>is_numeric() 函数对于 %00 这类空字符，不管是放在前后都可以判断为非数值，而%20空格字符只能放在数值后，因为查看函数发现改函数对于第一个空格字符会跳过空格字符直接判断后面的内容</p><h1 id="preg-match-函数-–-正则表达式"><a href="#preg-match-函数-–-正则表达式" class="headerlink" title="preg_match 函数 – 正则表达式"></a>preg_match 函数 – 正则表达式</h1><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>0次、1次或多次匹配其前一位</td></tr><tr><td>+</td><td>1次或多次匹配其前的原子</td></tr><tr><td>？</td><td>0次或1次匹配</td></tr><tr><td>|</td><td>匹配两个或者多个选择</td></tr><tr><td>^</td><td>匹配字符串串首</td></tr><tr><td>$</td><td>匹配字符串</td></tr><tr><td>[]</td><td>匹配方括号中任一原子</td></tr><tr><td>[^]</td><td>匹配除方括号中的原子外的任何字符</td></tr><tr><td>{m}</td><td>表示其前原子恰好出现m次</td></tr><tr><td>{m,n}</td><td>表示其前原子 （n&gt;m）</td></tr><tr><td>{m，}</td><td>表示其前原子出现不少于m次</td></tr><tr><td>（）</td><td>整体表示一个原子</td></tr><tr><td>.</td><td>匹配除换行之外的任何一个字符</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>); <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>]))&#123;     <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];     <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/.+?zkaqzkaq/is&#x27;</span>, <span class="hljs-variable">$f</span>))&#123;         <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bye!&#x27;</span>);     &#125;     <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$f</span>, <span class="hljs-string">&#x27;zkaqzkaq&#x27;</span>) === <span class="hljs-literal">FALSE</span>)&#123;         <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bye!!&#x27;</span>);     &#125;     <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>; &#125; </code></pre></div><p>注 ： preg_match 函数只能处理字符串，当传入的参数为数组时会返回 false</p><h1 id="md5-sha1-函数"><a href="#md5-sha1-函数" class="headerlink" title="md5 sha1 函数"></a>md5 sha1 函数</h1><ol><li>对于php强比较和弱比较： md5() ,sha1() 函数无法处理数组，如果传入的为数组，两个数组经过加密后都是 NULL ，也就是相等的。</li><li>对于某些特殊的字符串加密后得到的密文以 0e 开头，php 会当作可续计数法来处理，也就是 0 的n 次方，得到的值比较的时候 都相同。</li></ol><p>payload:</p><div class="code-wrapper"><pre><code class="hljs dns">md5： <span class="hljs-number">240610708</span>:<span class="hljs-number">0</span>e4620974319065090195<span class="hljs-number">62988736854</span>QLTHNDT:<span class="hljs-number">0</span>e40596782540195537<span class="hljs-number">2549139051580</span>QNKCDZO:<span class="hljs-number">0</span>e830400451993494058<span class="hljs-number">024219903391</span>PJNPDWY:<span class="hljs-number">0</span>e2915290528947027745<span class="hljs-number">57631701704</span>NWWKITQ:<span class="hljs-number">0</span>e7630820709760383476<span class="hljs-number">57360817689</span>NOOPCJF:<span class="hljs-number">0</span>e818888003657176127<span class="hljs-number">862245791911</span>MMHUWUV:<span class="hljs-number">0</span>e701732711630150438<span class="hljs-number">129209816536</span>MAUXXQC:<span class="hljs-number">0</span>e4784784668484390404<span class="hljs-number">34801845361</span> sha1： <span class="hljs-number">10932435112</span>: <span class="hljs-number">0</span>e0776691500413317634705586<span class="hljs-number">5026311692244</span>aaroZmOk: <span class="hljs-number">0</span>e66507019969427134894567494<span class="hljs-number">305185566735</span>aaK1STfY: <span class="hljs-number">0</span>e766585266557562076882711596<span class="hljs-number">24026011393</span>aaO8zKZF: <span class="hljs-number">0</span>e89257456677279068558073954<span class="hljs-number">252716165668</span>aa3OFF9m: <span class="hljs-number">0</span>e369777862785179849592603940<span class="hljs-number">24281014729</span><span class="hljs-number">0</span>e<span class="hljs-number">1290633704</span>: <span class="hljs-number">0</span>e19985187802402577070739524<span class="hljs-number">195726831799</span></code></pre></div><p>eg:</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-variable">$name</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>];<span class="hljs-keyword">if</span>(<span class="hljs-variable">$name</span> != <span class="hljs-variable">$pass</span>)&#123;    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$name</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$pass</span>))&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;True: flag&quot;</span>;    &#125;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;wrong&quot;</span>;    &#125;&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;1&quot;</span>;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><ul><li><p>使用数组绕过</p><ul><li><code>http://localhost/?name[]=aaa&amp;pass[]=bbb</code></li></ul></li><li><p>使用特殊值绕过</p><ul><li><code>http://localhost/?name=QLTHNDT&amp;pass=QNKCDZO</code></li></ul></li></ul><p>案例：</p><div class="code-wrapper"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span>    <span class="hljs-comment">// include(&#x27;flag.php&#x27;);</span>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);    <span class="hljs-variable">$v1</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];    <span class="hljs-variable">$v2</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$v2</span>))&#123;        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">ctype_alpha</span>(<span class="hljs-variable">$v1</span>))&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;v1 error&quot;</span>);        &#125;        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>))&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;v2 error&quot;</span>);        &#125;        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$v1</span>)==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$v2</span>))&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&#123;asd&#125;&quot;</span>;        &#125;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;where is flag?&quot;</span>;    &#125;<span class="hljs-meta">?&gt;</span> </code></pre></div><h1 id="strcmp-函数"><a href="#strcmp-函数" class="headerlink" title="strcmp 函数"></a>strcmp 函数</h1><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">strcmp</span>(<span class="hljs-variable">$str1</span>,<span class="hljs-variable">$str2</span>)<span class="hljs-comment">//strcmp 函数是比较两个字符串，如果str1&lt;str2 则返回 &lt; 0 。如果str1&gt;str2 则返回 &gt; 0 。 如果两者相等则返回 0；</span></code></pre></div><p><strong>strcmp 比较的是字符串类型，如果强行传入其他类型参数，会出错，出错后返回值为0，一般利用这一点进行绕过</strong></p><ul><li>flag.php</li></ul><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;flag&#123;lkasjhfdasdhfasiu8dfhawes&#125;&#x27;</span>;<span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;asddddddddddddddddd&#x27;</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><ul><li>index.php</li></ul><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strcmp</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>],<span class="hljs-variable">$password</span>) == <span class="hljs-number">0</span>)&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$flag</span>&quot;</span>;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;error&quot;</span>;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><h1 id="switch-函数"><a href="#switch-函数" class="headerlink" title="switch 函数"></a>switch 函数</h1><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;test.php&quot;</span>);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;paraml&#x27;</span>]))&#123;    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;paraml&#x27;</span>];    <span class="hljs-keyword">switch</span>(<span class="hljs-variable">$a</span>)&#123;        <span class="hljs-keyword">case</span> <span class="hljs-variable">$a</span>&gt;=<span class="hljs-number">0</span>:            <span class="hljs-keyword">echo</span> <span class="hljs-number">0</span>;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">case</span> <span class="hljs-variable">$a</span>&gt;=<span class="hljs-number">10</span>:            <span class="hljs-keyword">echo</span> FLAG;            <span class="hljs-keyword">break</span>;        <span class="hljs-keyword">default</span>:            <span class="hljs-keyword">echo</span> <span class="hljs-number">2</span>;            <span class="hljs-keyword">break</span>;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>payload:</p><div class="code-wrapper"><pre><code class="hljs routeros">?<span class="hljs-attribute">paraml</span>=0</code></pre></div><p>首先传进去 a &#x3D; 0;</p><ol><li>进入第一个case  : 判断 0&gt;&#x3D;0 结果为true，接着判断 0 &#x3D;&#x3D; true ，结果是false;</li><li>进入第二个case  ：判断 0&gt;&#x3D;10 结果是false，接着判断 0 &#x3D;&#x3D; false 结果是true;</li><li>输出flag;</li></ol><h1 id="intval-函数"><a href="#intval-函数" class="headerlink" title="intval 函数"></a>intval 函数</h1><p><em>注：漏洞只存在于某些版本的php中</em></p><p>intval 用于获取变量的整数值</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-number">53</span>)  <span class="hljs-comment">// 53</span><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-number">5.3</span>) <span class="hljs-comment">// 5</span></code></pre></div><p>函数使用方法：</p><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-keyword">int</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-keyword">var</span>,base)<span class="hljs-comment">/*</span><span class="hljs-comment">var 是要转换成 integer 的数量值，base只转化所用的进制</span><span class="hljs-comment">如果base是0，通过检测 var 的格式来决定所使用的进制</span><span class="hljs-comment">0x -&gt; 16进制</span><span class="hljs-comment">0 -&gt; 8进制</span><span class="hljs-comment">否则使用10 进制</span><span class="hljs-comment">*/</span></code></pre></div><p>成功时返回 var 的 integer 值，失败时返回 0； </p><p>空的 array 返回0 ，非空的 array 返回 0；</p><p>如果是一个弱比较 a &#x3D;&#x3D; b  ，我们传入 a[]&#x3D;1和b[]&#x3D;2</p><p>某些版本的php对科学计数法中的e不敏感</p><h4 id="案例1："><a href="#案例1：" class="headerlink" title="案例1："></a>案例1：</h4><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;test.php&#x27;</span>);<span class="hljs-variable">$s</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$s</span>) &lt; <span class="hljs-number">666</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$s</span>+<span class="hljs-number">1</span>) &gt; <span class="hljs-number">667</span>)&#123;    <span class="hljs-keyword">echo</span> FLAG;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>payload:</p><div class="code-wrapper"><pre><code class="hljs ruby"><span class="hljs-string">?a</span> = <span class="hljs-number">1e10</span></code></pre></div><h4 id="案例2："><a href="#案例2：" class="headerlink" title="案例2："></a>案例2：</h4><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>===<span class="hljs-string">&quot;6666&quot;</span>)&#123;          <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);    &#125;    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">6666</span>)&#123;         <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>);    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>解析： 函数格式 <code>intval($value,$base)</code></p><p>当 <code>$base</code> 的值为0 时，函数会检测 $value 的格式来决定使用的进制</p><p>payload：</p><p><code>/?num=0x1a0a</code></p><h1 id="strpos-函数"><a href="#strpos-函数" class="headerlink" title="strpos 函数"></a>strpos 函数</h1><p>strpos 函数查找字符串在另一个字符串中出现的位置并返回</p><h4 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h4><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>===<span class="hljs-string">&quot;6666&quot;</span>)&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);    &#125;    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z]/i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);    &#125;    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$num</span>, <span class="hljs-string">&quot;0&quot;</span>))&#123;           <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);    &#125;    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">6666</span>)&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></div><p>解析： preg_match 函数过滤了26的英文字母（包括大小写）</p><p>所以通过16进制来获取flag的方法是不可取的，可以考虑使用8进制来绕过，6666的八进制为 15012 在前面加上0 表示 8进制</p><p>所以传入 <code>015012</code></p><p>会发现还是不行，这是因为 第三条 if函数 控制了第一个传入的字符不能为 0 所以被ban掉了</p><p>可以尝试在传参前面加上一个空格</p><p>payload:</p><p>&#96;&#96;&#96;num&#x3D; 05012&#96;&#96;</p><h1 id="in-array-函数"><a href="#in-array-函数" class="headerlink" title="in_array 函数"></a>in_array 函数</h1><p>考点： 函数的作用是检查数组中是否存在某个值，当函数中</p>]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>CTF</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
